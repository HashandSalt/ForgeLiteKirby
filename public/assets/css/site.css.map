{"version":3,"sources":["webpack:///./src/sass/04-elements/_elements.typography.scss","webpack:///./node_modules/@slateengine/slatesasskits/slatetype/libs/_helpers.scss","webpack:///./src/sass/01-settings/_settings.type.scss","webpack:///./src/sass/01-settings/_settings.colors.scss","webpack:///./src/sass/01-settings/_settings.type-stacks.scss","webpack:///./src/sass/site.scss","webpack:///./node_modules/@slateengine/slatesass/libs/_helpers.scss","webpack:///./src/sass/04-elements/_elements.html.scss","webpack:///./src/sass/04-elements/_elements.body.scss","webpack:///./src/sass/04-elements/_elements.media.scss","webpack:///./src/sass/04-elements/_elements.buttons.scss","webpack:///./node_modules/@slateengine/slatesasskits/slatebuttons/libs/_helpers.scss","webpack:///./node_modules/@slateengine/slatesass/libs/functions/_util.scss","webpack:///./src/sass/04-elements/_elements.table.scss","webpack:///./node_modules/@slateengine/slatesasskits/slatetables/libs/_helpers.scss","webpack:///./src/sass/05-objects/_objects.logo.scss","webpack:///./node_modules/@slateengine/slatesasskits/slatemq/libs/_helpers.scss","webpack:///./src/sass/05-objects/_objects.container.scss","webpack:///./node_modules/@slateengine/slatesasskits/slategrid/libs/_helpers.scss","webpack:///./src/sass/05-objects/_objects.wrapper.scss","webpack:///./src/sass/06-components/_components.siteheader.scss","webpack:///./src/sass/06-components/_components.footer.scss","webpack:///./src/sass/06-components/_components.menu.scss","webpack:///./src/sass/06-components/_components.forms.scss","webpack:///./node_modules/@slateengine/slatesasskits/slateforms/libs/_form-helpers.scss","webpack:///./node_modules/@slateengine/slatesasskits/slateforms/libs/_inputs.scss","webpack:///./node_modules/@slateengine/slatesasskits/slateforms/libs/_input-helpers.scss","webpack:///./node_modules/@slateengine/slatesasskits/slateforms/libs/_select.scss","webpack:///./node_modules/@slateengine/slatesasskits/slateforms/libs/_range.scss","webpack:///./node_modules/@slateengine/slatesasskits/slateforms/libs/_addons.scss","webpack:///./node_modules/@slateengine/slatesasskits/slateforms/libs/_valid-helpers.scss","webpack:///./node_modules/@slateengine/slatesasskits/slateforms/libs/_checkradio.scss"],"names":[],"mappings":"AASA;ECkHE;EAmCE;EACA;EDnJF,iBEKY;EFJZ,eGNK;EHOL,sOIaW;EJZX,iBEwCQ;EFvCR;CKPF;;ALkBA;;EM+HQ;EL1BN;EK0BM;EAAA;CDzIR;;ALgBA;;EMyHQ;EL1BN;EK0BM;EAAA;CDjIR;;ALcA;;EMmHQ;EL1BN;EK0BM;EAAA;CDzHR;;ALYA;;;;EM6GQ;EL1BN;EK0BM;EAAA;CD/GR;;ALUA;;;;;;;;;EASE,eGvDK;EHwDL,qEI5CS;EJ6CT,iBETQ;CGEV;;ALaA;EMoFQ;EL1BN;EK0BM;EAAA;CD1FR;;ALcA;;EM4EQ;EL1BN;EK0BM;EAAA;CDlFR;ALWE;;EACE;EACA;CKRJ;ALWE;;EACE;EACA;CKRJ;;ALYA;EM4DQ;EL1BN;EK0BM;EAAA;CDjER;ALSE;EACE,iBEtCO;CG+BX;ALUE;EACE;CKRJ;;ALqBA;EMsCQ;EL1BN;EK0BM;EAAA;ENnCN;CKhBF;;ALmBA;EACE;CKhBF;;ALsBA;EACE,eG3HK;EH4HL;CKnBF;ALqBE;EACE,YG9HE;EH+HF,2BE1BoB;CGOxB;ALsBE;EAEE;EACA,YGrIE;CEgHN;ALwBE;EACE;CKtBJ;;AL0BA;EACE;EACA,8BEpCS;EFqCT;EACA;EACA;EACA;CKvBF;;AL0BA;;EAEE;EACA;EACA;CKvBF;;AL0BA;EACE;CKvBF;;AL0BA;EACE;CKvBF;;AL0BA;EACE;CKvBF;;AL0BA;EACE,iBElHK;EFmHL,eG5KK;CEqJP;;AL0BA;;;;EAIE,iBEzKY;CGkJd;;AL0BA;EMnCQ;EL1BN;EK0BM;EAAA;CDgBR;;ALuBA;EACE;EACA;EACA;EACA;CKpBF;;ALuBA;EM9CQ;EL1BN;EK0BM;EAAA;EAAA;EAAA;ENkDN,0BGrMK;EHsML,YGxMO;EHyMP,iBE9IK;EF+IL,kFI5KS;EJ6KT;EACA;EACA;EACA;EACA;CKjBF;;AE/LA;EDUE;ECRA;CFkMF;ACxLE;;;EAGE;CD0LJ;;AGzMA;EACE;EACA;EACA;EACA;CH4MF;;AIhNA;EACE;EACA;CJmNF;;AIhNA;EACE;EACA;CJmNF;;AK1NA;EJsJQ;EAAA;EAAA;EAAA;EAAA;EAAA;EK1IN;EACA;EACA;EACA;EACA;EACA;EACA;EACA;ECoJA;EDhJA;ECqJE,8BDlJiB;ECmJjB,oBDnJqD;ECoJrD,sBDpJyF;EDxB3F;CL+OF;AM/LE;ECqHA;EDlHE;EACA;ECsHA,8BDpHmB;ECqHnB,oBDrHuD;ECsHvD,sBDtH2F;CNiM/F;AM3LE;ECyGA;EDtGE;EACA;EC0GA,8BDxGmB;ECyGnB,oBDzGuD;EC0GvD,sBD1G2F;CN6L/F;AMvLE;EC6FA;ED1FE;EACA;EC8FA,8BD5FmB;EC6FnB,oBD7FuD;CNwL3D;AMlLE;ECiFA;ED9EE;EACA;ECkFA,8BDhFmB;ECiFnB,oBDjFuD;ECkFvD,sBDlF2F;CNoL/F;;AQhRA;ECwBE;EACA;EACA;EACA;EACA;EACA;EF+IE,8BE9Ie;EF+If,oBE/IyD;EFgJzD,mBEhJmG;CT8PvG;AS5PE;ERsHM;EAAA;EQvIN;EACA;EACA;EACA;EACA;EFyJE,wBExJe;EFyJf,oBEzJ8D;EF0J9D,mBE1J6G;CToRjH;ASnQI;;ERiHI;EAAA;EQvIN;EACA;EACA;EACA;EACA;EFyJE,8BExJe;EFyJf,oBEzJ8D;EF0J9D,mBE1J6G;CTiSjH;ASzQI;ER0GI;EAAA;EQvIN;EACA;EACA;EACA;EACA;EFyJE,8BExJe;EFyJf,oBEzJ8D;EF0J9D,mBE1J6G;CT6SjH;AS/QI;ERoGI;EAAA;EQvIN;EACA;EACA;EACA;EACA;EFyJE,8BExJe;EFyJf,oBEzJ8D;EF0J9D,mBE1J6G;CTyTjH;;AU5UE;EACE;EACA;EACA;CV+UJ;AU5UE;EACE;EACA;CV8UJ;AW1SE;ED7CF;IAYI;GV+UF;CACF;;AY5VA;EXsJQ;EY/HF;EACA;EAEF;CbyUJ;ACjTI;EACE;EACA;EACA;CDmTN;;AcxWA;EACE;EACA;EACA;Cd2WF;;Ae9WA;EdsJQ;EY/HF;EACA;EAEF;EExBF;EACA;EAMA;EACA;Cf+WF;ACvUI;EACE;EACA;EACA;CDyUN;AWjVE;EI7CF;IAKI;IACA;IACA;Gf6XF;CACF;;AgBpYA;EACE,uBlBEI;CEqYN;;AgBpYA;EfiJQ;EY/HF;EACA;EAEF;EGlBF;EAEA;EACA;EACA;EACA;ChBwYF;ACnWI;EACE;EACA;EACA;CDqWN;AW7WE;EKxCF;IAWI;IACA;GhB8YF;CACF;AgB3YE;EACE;ChB6YJ;AWtXE;EKxBA;IAII;GhB8YJ;CACF;AgB3YE;EACE;ChB6YJ;AW9XE;EKhBA;IAII;GhB8YJ;CACF;AgB1YE;;EfgHM;EL1BN;EK0BM;EAAA;Ee7GJ,YlBxCK;EkByCL,iBnBeO;EmBdP;ChB+YJ;;AiB1bA;EACE;EACA;EACA;EACA;EACA;EACA;EACA,iBpBkDS;CG2YX;AWvZE;EM7CF;IASI;GjB+bF;CACF;;AkBzcA;EjBsJQ;EAAA;CDwTR;AmB/bE;ElBuIM;EAAA;CD4TR;AmB9bE;ElBkIM;EAAA;EkB/HJ;CnBgcJ;AmB7bE;;ElB4HM;EkBzHF;EACA;EACA;EACA,iBtBnBQ;CGkdd;AoBrdE;;;EAGE;EACA;CpBudJ;AoBpdE;EnBqIM;EAAA;EAAA;EAAA;EoB7IN;EACA;EACA;EAEA;Ed+JE,8Bc5JiB;Ed6JjB,oBc7JqE;Ed8JrE,sBc9JyH;EduJ3H;CP4UF;AqB7dE;EACE;EACA;EdoJA,8BclJmB;EdmJnB,oBcnJuE;EdoJvE,sBcpJ2H;Ed6I7H;CPoVF;AqB1dE;EACE;EACA;EdyIA,8BcvImB;EdwInB,oBcxIuE;EdyIvE,sBczI2H;EdkI7H;CP4VF;AqBvdE;EACE;EACA;Ed8HA,8Bc5HmB;Ed6HnB,oBc7HuE;Ed8HvE,sBc9H2H;EduH7H;CPoWF;AoBtfE;EnBiIM;EAAA;EmB9HJ;EACA;EACA;EACA;EACA;EACA;CpBwfJ;AoBrfE;EACE;CpBufJ;AoBpfE;EACE;CpBsfJ;AoBnfE;EAEI;EACA;EACA;EACA;EAIE;CpBifR;AoB5eE;EnBgGM;EAAA;EAAA;EmB5FJ;EACA;EACA;EACA;EACA;EACA;EACA;Eb4GA,8Ba3GiB;Eb4GjB,oBa5GqE;Eb6GrE,sBa7GyH;CpBgf7H;AoB9eI;EbyGA,8BaxGmB;EbyGnB,oBazGuE;Eb0GvE,sBa1G2H;CpBkf/H;AoB/eI;EbqGA,8BapGmB;EbqGnB,oBarGuE;EbsGvE,sBatG2H;CpBmf/H;AoBhfI;EbiGA,8BahGmB;EbiGnB,oBajGuE;EbkGvE,sBalG2H;CpBof/H;AsBljBE;ErBwIM;EAAA;EAAA;EAAA;EoB7IN;EACA;EACA;EAEA;Ed+JE,8Bc5JiB;Ed6JjB,oBc7JqE;Ed8JrE,sBc9JyH;EduJ3H;EevJE;EACA;EACA;CtB+jBJ;AqB3jBE;EACE;EACA;EdoJA,8BclJmB;EdmJnB,oBcnJuE;EdoJvE,sBcpJ2H;Ed6I7H;CPkbF;AqBxjBE;EACE;EACA;EdyIA,8BcvImB;EdwInB,oBcxIuE;EdyIvE,sBczI2H;EdkI7H;CP0bF;AqBrjBE;EACE;EACA;Ed8HA,8Bc5HmB;Ed6HnB,oBc7HuE;Ed8HvE,sBc9H2H;EduH7H;CPkcF;AsBrlBI;EACE;CtBulBN;AsBplBI;EACE;EACA;CtBslBN;AsBnlBI;EAEI;EACA;EACA;EACA;EAIE;CtBilBV;AuB7lBE;EACE,YAVY;EAWZ;EACA;EACA;CvB+lBJ;AuB7lBI;EACE;CvB+lBN;AuB5lBI;EACE;CvB8lBN;AuB5lBM;EAEE;CvB6lBR;AuB1lBM;EACE,iBA/BQ;CvB2nBhB;AuBxlBI;EACE,YAjCU;EAkCV,aAnCW;EAoCX;EACA;EAAA;EACA,mBAvCW;EAwCX,iBAzCU;EhB8JZ,kBgB1JmB;EhB2JnB,oBgBzJmB;EhB0JnB,sBgB3JmB;CvBioBvB;AuBzlBI;EACE;EACA,YApDU;EAqDV,aAtDW;EAuDX;EACA;EACA,oBA1DW;EA2DX,oBA5DU;EhBsKZ,kBgBlKmB;EhBmKnB,oBgBjKmB;EhBkKnB,sBgBnKmB;EAyDjB;CvB6lBN;AuB1lBI;EACE,YAvDU;EAwDV;EACA;EACA;EAAA;EACA,mBA7DW;EA8DX,iBA/DU;EhB8JZ,kBgB1JmB;EhB2JnB,oBgBzJmB;EhB0JnB,sBgB3JmB;CvBypBvB;AuB3lBI;EACE;EACA,YA1EU;EA2EV,aA5EW;EA6EX;EACA,oBA/EW;EAgFX,oBAjFU;EhBsKZ,kBgBlKmB;EhBmKnB,oBgBjKmB;EhBkKnB,sBgBnKmB;CvB4qBvB;AuB5lBI;EACE,YA3EU;EA4EV,aA7EW;EA8EX;EACA;EAAA;EACA;EACA;EACA;EACA;CvB8lBN;AuB3lBI;EACE;EACA,oBAhFoB;EhBoJtB,kBgB1JmB;EhB2JnB,oBgBzJmB;EhB0JnB,sBgB3JmB;CvBqrBvB;AuB5lBI;EACE;EACA,iBAhGU;EhB8JZ,kBgB1JmB;EhB2JnB,oBgBzJmB;EhB0JnB,sBgB3JmB;CvB4rBvB;AuB7lBI;EACE;EACA,YA3GU;EA4GV,aA7GW;EA8GX;EACA;EACA,oBAjHW;EAkHX,oBAnHU;EhBsKZ,kBgBlKmB;EhBmKnB,oBgBjKmB;EhBkKnB,sBgBnKmB;CvBgtBvB;AuB7lBM;EAME;CvB0lBR;AwBvsBE;EACE;EACA;EACA;EACA;EACA;EACA;CxBysBJ;AwBtsBI;EACE;CxBwsBN;AqB7qBE;;;;;;;;;;;;;;;EGtBI;EACA;CxBotBN;AwBhtBI;EACE;EACA;CxBktBN;AwB9sBI;;;EAGE;EvBkGE;EAAA;EAAA;EAAA;EAAA;EAAA;EK1IN;EACA;EACA;EACA;EACA;EACA;EACA;EACA;ECoJA;EDhJA;ECqJE,8BDlJiB;ECmJjB,oBDnJqD;ECoJrD,sBDpJyF;EkB4BvF;CxBkuBN;AMtuBE;;;ECqHA;EDlHE;EACA;ECsHA,8BDpHmB;ECqHnB,oBDrHuD;ECsHvD,sBDtH2F;CN0uB/F;AMpuBE;;;ECyGA;EDtGE;EACA;EC0GA,8BDxGmB;ECyGnB,oBDzGuD;EC0GvD,sBD1G2F;CNwuB/F;AMluBE;;;EC6FA;ED1FE;EACA;EC8FA,8BD5FmB;EC6FnB,oBD7FuD;CNquB3D;AM/tBE;;;ECiFA;ED9EE;EACA;ECkFA,8BDhFmB;ECiFnB,oBDjFuD;ECkFvD,sBDlF2F;CNmuB/F;AwBtwBI;EACE;CxBwwBN;AwBnwBI;EACE;EACA;CxBqwBN;AwBnwBM;;;EAGE;CxBqwBR;AwBnwBQ;;;EACE;CxBuwBV;AwBhwBM;;;EAGE;CxBkwBR;AwBhwBQ;;;EACE;CxBowBV;AwB/vBI;EACE;EACA;EACA;CxBiwBN;AwB/vBM;EACE;EACA;CxBiwBR;AwB/vBQ;EACE;EACA;EACA;EjBgER;CPksBF;AwB7vBM;;EAEE;CxB+vBR;AwB7vBQ;;EACE;CxBgwBV;AyBl2BI;EACE;CzBo2BN;AyBj2BI;EACE;CzBm2BN;AyBh2BI;EACE;CzBk2BN;AyB31BM;EACE;EACA;CzB61BR;AyB31BQ;EACE;EACA;CzB61BV;AyBz1BM;EACE;EACA;CzB21BR;AyBz1BQ;EACE;EACA;CzB21BV;AyBv1BM;EACE;EACA;CzBy1BR;AyBv1BQ;EACE;EACA;CzBy1BV;AkB/4BE;EACE;EACA;EACA;ClBi5BJ;AkB94BE;EACE;ClBg5BJ;;AkB54BA;EACE;EACA;EACA;EACA;ClB+4BF;ACt0BE;EiB7EF;IAMI;IACA;GlBi5BF;CACF;AC50BE;EiB7EF;IAUI;IACA;GlBm5BF;CACF;AkBj5BE;EACE;ClBm5BJ;AkBj5BI;EACE;EjBsHE;EL1BN;EK0BM;EAAA;CDiyBR;AkBl5BE;EACE;EACA;EACA;ClBo5BJ;;A0Bt7BE;EzBgJM;EAAA;EyB7IJ;EACA;EACA;C1By7BJ;A0Bv7BI;EzByII;EAAA;EAAA;EyBrIF;EACA;EACA;EACA;EACA;EACA;EACA;EnBqJF,8BmBpJmB;EnBqJnB,oBmBrJuE;EnBsJvE,sBmBtJ2H;C1B27B/H;A0Bv7BE;;EzB0HM;EyBvHJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;C1By7BJ;A0Bv7BI;;EzB8GI;EyB5GF;C1B07BN;A0Br7BQ;;EACE;EACA;EACA;EACA;EACA;EnBwHN,8BmBvHuB;EnBwHvB,oBmBxH2E;EnByH3E,sBmBzH+H;C1B07BnI;A0Bn7BQ;;EnBgHJ,8BmB/GuB;EnBgHvB,oBmBhH2E;EnBiH3E,sBmBjH+H;EACzH;EACA;C1Bw7BV;A0Bl7BU;;EnBuGN,8BmBtGyB;EnBuGzB,oBmBvG6E;EnBwG7E,sBmBxGiI;EACzH;EACA;C1Bu7BZ;A0B/6BQ;;EnB4FJ,8BmB3FuB;EnB4FvB,oBmB5F2E;EACrE;EACA;C1Bm7BV;A0B76BU;;EnBmFN,8BmBlFyB;EnBmFzB,oBmBnF6E;EnBoF7E,sBmBpFiI;EACzH;C1Bk7BZ;A0Bx6BM;EACE;C1B06BR;A0Bp6BQ;EACE;EACA;EACA;EACA;EACA;C1Bs6BV;;AkBv+BA;EACE;EACA;EACA;EACA,epBvCS;CEihCX;AkBx+BE;EjBgGM;EL1BN;EK0BM;EAAA","file":"public/assets/css/site.css","sourcesContent":["// ======================================================================\n// 04-elements - Typography\n// ======================================================================\n\n\n// ======================================================================\n// HTML\n// ======================================================================\n\nhtml {\n  @include rem-baseline(100%);\n  @include font-smoothing(on);\n  line-height: $line-height;\n  color: $font-color;\n  font-family: $font-stack;\n  font-weight: $font-weight;\n  text-rendering: optimizeLegibility;\n}\n\nbody {\n  @include baseline;\n}\n\n// ======================================================================\n// Headings\n// ======================================================================\n\n.h1,\nh1 {\n  // @include type-modular(delta, 0px, 48px);\n  @include type-free(38px, 24px, 24px, 48px, true);\n}\n\n.h2,\nh2 {\n  // @include type-modular(delta, 0px, 48px);\n  @include type-free(28px, 24px, 24px, 48px, true);\n}\n\n.h3,\nh3 {\n  // @include type-modular(epsilon, 0px, 24px );\n  @include type-free(21px, 24px, 0px, 24px, true);\n}\n\n.h4,\n.h5,\nh4,\nh5 {\n  // @include type-modular(epsilon, 0px, 0px );\n  @include type-free(16px, 24px, 0, 24px, true);\n}\n\n.h1,\n.h2,\n.h4,\n.h5,\nh1,\nh2,\nh3,\nh4,\nh5 {\n  color: $heading-color;\n  font-family: $heading-stack;\n  font-weight: $heading-weight;\n}\n// ======================================================================\n// Paragraphs\n// ======================================================================\n\np {\n  // @include type-modular(zeta, 0px, 24px);\n  @include type-free($base-font-size, 0, 24px, 24px, true);\n}\n// ======================================================================\n// Lists\n// ======================================================================\n\nol,\nul {\n  // @include type-modular(zeta);\n  @include type-free($base-font-size, 0, 24px, 24px, true);\n\n  ol {\n    margin-bottom: 0;\n    margin-top: 0;\n  }\n\n  ul {\n    margin-bottom: 0;\n    margin-top: 0;\n  }\n}\n\ndl {\n  // @include type-modular(zeta);\n  @include type-free($base-font-size, 0, 24px, 24px, true);\n\n  dt {\n    font-weight: $semibold;\n  }\n\n  dd {\n    font-style: italic;\n  }\n}\n// ======================================================================\n// Tables\n// ======================================================================\n// table {\n//   @include table($default-table);\n// }\n// ======================================================================\n// Quotes\n// ======================================================================\n\nblockquote {\n  // @include type-modular(zeta);\n  @include type-free($base-font-size, 0, 24px, 24px, true);\n  font-style: italic;\n}\n\nblockquote > p {\n  padding: 0;\n}\n// ======================================================================\n// Misc\n// ======================================================================\n\na {\n  color: $link;\n  text-decoration: none;\n\n  &:hover {\n    color: $link-hover;\n    text-decoration: $link-hover-decoration;\n  }\n\n  &:active,\n  &:focus {\n    outline: none;\n    color: $link-hover;\n  }\n\n  p & {\n    border-bottom: 1px solid $dark;\n  }\n}\n\nhr {\n  border: 0;\n  border-top: $hr-style;\n  display: block;\n  height: 1px;\n  padding: 0;\n  margin-bottom: rem(24px);\n}\n\nsub,\nsup {\n  position: relative;\n  top: -0.4rem;\n  vertical-align: baseline;\n}\n\nsub {\n  top: 0.4rem;\n}\n\nb {\n  line-height: 1;\n}\n\nsmall {\n  line-height: 1;\n}\n\nstrong {\n  font-weight: $bold;\n  color: $dark;\n}\n\ncite,\ndfn,\nem,\nq {\n  line-height: $line-height;\n}\n\ncode {\n  @include type-free($base-font-size, 0, 24px, 24px, true);\n}\n\nkbd {\n  margin-bottom: 1px;\n  padding: 0;\n  position: relative;\n  top: -1px;\n}\n\npre {\n  @include type-free($base-font-size, 0, 24px, 24px, true);\n  @include rem(padding, 12px);\n  @include rem(border-radius, 4px);\n  background-color: $dark;\n  color: $bright;\n  font-weight: $bold;\n  font-family: $terminal;\n  white-space: pre;\n  word-break: break-all;\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  white-space: pre\\9;\n}\n","// ======================================================================\n// Slate Framework <hello@slateengine.com>\n// ======================================================================\n//\n// ======================================================================\n// Typekit Helpers\n// ======================================================================\n\n$modular-scale-alpha: type-setting($base-font-size, $type-ratio, $modular-step-alpha);\n$modular-scale-beta: type-setting($base-font-size, $type-ratio, $modular-step-beta);\n$modular-scale-gamma: type-setting($base-font-size, $type-ratio, $modular-step-gamma);\n$modular-scale-delta: type-setting($base-font-size, $type-ratio, $modular-step-delta);\n$modular-scale-epsilon: type-setting($base-font-size, $type-ratio, $modular-step-epsilon);\n$modular-scale-zeta: type-setting($base-font-size, $type-ratio, $modular-step-zeta);\n$modular-scale-eta: type-setting($base-font-size, $type-ratio, $modular-step-eta);\n$modular-scale-theta: type-setting($base-font-size, $type-ratio, $modular-step-theta);\n$modular-scale-iota: type-setting($base-font-size, $type-ratio, $modular-step-iota);\n\n$lineheight-alpha: $modular-scale-alpha * $line-height;\n$lineheight-beta: $modular-scale-beta * $line-height;\n$lineheight-gamma: $modular-scale-gamma * $line-height;\n$lineheight-delta: $modular-scale-delta * $line-height;\n$lineheight-epsilon: $modular-scale-epsilon * $line-height;\n$lineheight-zeta: $modular-scale-zeta * $line-height;\n$lineheight-eta: $modular-scale-eta * $line-height;\n$lineheight-theta: $modular-scale-theta * $line-height;\n$lineheight-iota: $modular-scale-iota * $line-height;\n\n// Map of modular font scales\n// @group Typography\n$type-scale: ( alpha: $modular-scale-alpha, beta: $modular-scale-beta, gamma: $modular-scale-gamma, delta: $modular-scale-delta, epsilon: $modular-scale-epsilon, zeta: $modular-scale-zeta, eta: $modular-scale-eta, theta: $modular-scale-theta, iota: $modular-scale-iota );\n\n// Map of line heights\n// @group Typography\n$line-heights: ( alpha: $lineheight-alpha, beta: $lineheight-beta, gamma: $lineheight-gamma, delta: $lineheight-delta, epsilon: $lineheight-epsilon, zeta: $lineheight-zeta, eta: $lineheight-eta, theta: $lineheight-theta, iota: $lineheight-iota );\n\n/// Modular type mixin lets you easily generate a font size on an element with lineheights and margins based on a modular scale.\n/// @example scss - Modular Type\n///     p {\n///       @include type-modular(gamma, 24px, 24px, 24px, true )\n///     }\n/// @param {string} $type-scale - Desired modular scale\n/// @param {string} $type-scale-vtspace - Desired margin above element (optional)\n/// @param {string} $type-scale-vbspace - Desired margin below element (optional)\n/// @param {string} $tflh - Overide line-height. Use pixel values, they will be converted. (optional)\n/// @param {string} $tfuline - Generate unitless lineheights. (optional)\n/// @group Typography\n\n@mixin type-modular($type-scale, $type-scale-vtspace: $base-font-size * $line-height, $type-scale-vbspace: $base-font-size * $line-height, $mlh: line-height($type-scale), $muline: $unitless-lineheight) {\n  @include rem(font-size, type-scale($type-scale));\n  @if $muline == true {\n    @include unitless-line-height(type-scale($type-scale), $mlh);\n  } @else {\n    @include rem(line-height, $mlh);\n  }\n  @include rem(margin-top, $type-scale-vtspace);\n  @include rem(margin-bottom, $type-scale-vbspace);\n}\n\n/// Free type mixin lets you easily generate a font size on an element with lineheights and margins based on a pixel value.\n/// @example scss - Free Type\n///     p {\n///       @include type-free(16px, 24px, 24px, 24px, true)\n///     }\n/// @param {string} $type-size - Desired font size in pixels\n/// @param {string} $type-scale-vtspace - Desired margin above element (optional)\n/// @param {string} $type-scale-vbspace - Desired margin below element (optional)\n/// @param {string} $tflh - Overide line-height. Use pixel values, they will be converted. (optional)\n/// @param {string} $tfuline - Generate unitless lineheights. (optional)\n/// @group Typography\n\n@mixin type-free($type-size, $type-scale-vtspace, $type-scale-vbspace, $tflh: $line-height, $tfuline: $unitless-lineheight) {\n  @include rem(font-size, $type-size);\n  @if $tfuline == true {\n    @include unitless-line-height($type-size, $tflh);\n  } @else {\n    @include rem(line-height, $tflh);\n  }\n  @include rem(margin-top, $type-scale-vtspace);\n  @include rem(margin-bottom, $type-scale-vbspace);\n}\n\n/// Font face mixin lets you very easily add custom fonts in multiple formats.\n/// @example scss - Fontface\n///     @include fontface(\"IM FELL English\", \"IMFeENrm28P\", $extrabold, normal, $formats: eot woff woff2 ttf svg);\n///\n///     .custom-font {\n///       font-family: \"IM FELL English\";\n///     }\n/// @param {string} $font-family - The fonts name eg \"IM FELL English\"\n/// @param {string} $font-name - The fonts filename without the extension \"IMFeENrm28P\"\n/// @param {string} $weight [normal] - Font weight\n/// @param {string} $style [normal] - Font style\n/// @param {string} $formats - List of font file types to use\n/// @group Typography\n\n@mixin fontface($font-family, $font-name, $weight: normal, $style: normal, $formats: eot woff ttf svg) {\n  @if index('italic' 'oblique', $weight) {\n    $style: $weight;\n    $weight: normal;\n  }\n  @font-face {\n    font-family: $font-family;\n    font-weight: $weight;\n    font-style: $style;\n    font-display: swap;\n    @if index($formats, eot) {\n      src: url('#{$custom-font-path}#{$font-name}.eot');\n    }\n    src: fontsrc($formats, $font-name, $font-family);\n  }\n}\n\n\n\n/// REM Baseline\n/// @example scss - Free Type\n///     .yourelement {\n///       @include rem-baseline;\n///     }\n/// @param {number} $zoom - zoom amount\n/// @group Type Kit\n@mixin rem-baseline($zoom: 100%) {\n  font-size: ($zoom / 16px) * $base-font-size;\n}\n\n// unitless line height mixin\n@mixin unitless-line-height($font-size, $line-height: $line-height) {\n  line-height: unitless-line-height($font-size, $line-height);\n}\n\n/// Draw Baselines to help with setting typography.\n/// @example scss - lines\n///     .yourelement {\n///       @include lines($base-font-size, $line-height);\n///     }\n/// @param {number} $line-font-size - Overide the font size used to calculate the lines\n/// @param {number} $line-line-height - Overide the lineheight used to calculate the lines\n/// @group Type Kit\n@mixin baseline($line-font-size: $base-font-size, $line-line-height: $line-height) {\n  $bsize: ($line-font-size * $line-line-height);\n  @if($type-debug == true) {\n    background-size: rem($bsize $bsize);\n    background-image: linear-gradient(to bottom, hsla(200, 100%, 50%, .3) 1px, transparent 1px);\n    background-position: left -1px;\n    background-repeat: repeat;\n  }\n}\n\n/// Font Smoothing\n/// @example scss - Font Smoothing\n///     .yourelement {\n///       @include font-smoothing(on);\n///     }\n/// @param {number} $zoom - zoom amount\n/// @group Type Kit\n@mixin font-smoothing($value: on) {\n  @if $value == on {\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  } @else {\n    -webkit-font-smoothing: subpixel-antialiased;\n    -moz-osx-font-smoothing: auto;\n  }\n}\n","// ======================================================================\n// Slate Type Config | hello@hashandsalt.com\n// ======================================================================\n\n// Basic Setup\n// ======================================================================\n\n// Enable Type Debug\n$type-debug: false;\n\n// Basic Setup\n// ======================================================================\n\n// Set Global Font size\n$base-font-size: $rem-base;\n\n// Set Global Line height\n$line-height: 1.5;\n\n// Set Global line-heights with no units\n$unitless-lineheight: true;\n\n// The ratio used to generate sizes and margins on heading tags\n$type-ratio: $perfect-fourth;\n\n// Global Font Smoothing\n$webkit-smoothing: antialiased;\n\n// Modular Steps\n// ======================================================================\n\n// Modular Stepping Multipliers\n$modular-step-alpha: 5;\n$modular-step-beta: 4;\n$modular-step-gamma: 3;\n$modular-step-delta: 2;\n$modular-step-epsilon: 1;\n$modular-step-zeta: 0;\n$modular-step-eta: -1;\n$modular-step-theta: -2;\n$modular-step-iota: -3;\n\n// Font Weights\n// ======================================================================\n\n// Thin\n$thin: 100;\n\n// Extra light\n$extralight: 200;\n\n// Light\n$light: 300;\n\n// Regular\n$regular: 400;\n\n// Medium\n$medium: 500;\n\n// Semibold\n$semibold: 600;\n\n// Bold\n$bold: 700;\n\n// Extra Bold\n$extra-bold: 800;\n\n// Black\n$black: 900;\n\n// Global font styles\n// ======================================================================\n\n// Global Font Stack\n$font-stack: $shelvetica;\n\n// Global Font Weight\n$font-weight: $regular;\n\n// Global Font Color\n$font-color: $dark;\n\n// Global heading font styles\n// ======================================================================\n\n// Heading Font Stack\n$heading-stack: $gillsans;\n\n// Heading Font Color\n$heading-weight: $regular;\n\n// Heading Font Weight\n$heading-color: $dark;\n\n// Custom Font Path\n$custom-font-path: '/assets/fonts/';\n\n// Links\n// ======================================================================\n\n// Link Color\n$link: $dark;\n\n// Link Hover Color\n$link-hover: $jet;\n\n// Link Hover Color\n$link-hover-decoration: underline;\n\n// Horizontal Rules\n// ======================================================================\n\n// Horizontal Rule color and thickness\n$hr-style: 1px solid $primary;\n","// ======================================================================\n// Slate Colors | hello@hashandsalt.com\n// ======================================================================\n\n// Basic\n$bright: #eee;\n$gray: #9f9f9f;\n$dark: #3c3c3c;\n$jet: #000;\n\n// Pallette\n$primary: #96def0;\n$secondary: #2980b9;\n$tertiary: #8e44ad;\n\n// Feedback\n$positive: #2ecc71;\n$negative: #971318;\n$warning: #f39c12;\n$disabled: #adadad;\n\n// Gradients\n$gradient-start: $primary;\n$gradient-middle: darken($primary, 20%);\n$gradient-end: darken($primary, 40%);\n","// ======================================================================\n// Slate Type Stacks Config | hello@hashandsalt.com\n// ======================================================================\n\n// Simple Times Font Stack\n$times: Times, 'Times New Roman', serif;\n// Simple Arial Font Stack\n$arial: Arial, sans-serif;\n// Simple Georgia Font Stack\n$georgia: Georgia, serif;\n// Simple Garamond Font Stack\n$garamond: 'Apple Garamond', 'ITC Garamond Narrow', 'Garamond', serif;\n// Simple Helvetica Font Stack\n$helvetica: 'Helvetica Neue', Helvetica, sans-serif;\n// Simple Verdana Font Stack\n$verdana: 'Verdana Ref', Verdana, sans-serif;\n// Simple Trebuchet Font Stack\n$trebuchet: 'Trebuchet MS', sans-serif;\n// Simple Gill Sans Font Stack\n$gillsans: 'Gill Sans MT', 'Gill Sans', Tahoma, Geneva, sans-serif;\n// Full Times Font Stack\n$stimes: Cambria, 'Hoefler Text', Utopia, 'Liberation Serif', 'Nimbus Roman No9 L Regular', 'Times New Roman', Times, serif;\n// Full Georgia Font Stack\n$sgeorgia: Constantia, 'Lucida Bright', Lucidabright, 'Lucida Serif', Lucida, 'DejaVu Serif', 'Bitstream Vera Serif', 'Liberation Serif', Georgia, serif;\n// Full Garamond Font Stack\n$sgaramond: 'Palatino Linotype', Palatino, Palladio, 'URW Palladio L', 'Book Antiqua', Baskerville, 'Bookman Old Style', 'Bitstream Charter', 'Nimbus Roman No9 L', 'Apple Garamond', 'ITC Garamond Narrow', 'New Century Schoolbook', 'Century Schoolbook', 'Century Schoolbook L', Garamond, serif;\n// Full Helvetica Font Stack\n$shelvetica: Frutiger, 'Frutiger Linotype', Univers, Calibri, 'Gill Sans', 'Gill Sans MT', 'Myriad Pro', Myriad, 'DejaVu Sans Condensed', 'Liberation Sans', 'Nimbus Sans L', Tahoma, Geneva, 'Helvetica Neue', Helvetica, sans-serif;\n// Full Verdana Font Stack\n$sverdana: Corbel, 'Lucida Grande', 'Lucida Sans Unicode', 'Lucida Sans', 'DejaVu Sans', 'Bitstream Vera Sans', 'Liberation Sans', 'Verdana Ref', Verdana, sans-serif;\n// Full Trebuchet Font Stack\n$strebuchet: 'Segoe UI', Candara, 'Bitstream Vera Sans', 'DejaVu Sans', 'Bitstream Vera Sans', 'Trebuchet MS', Trebuchet, sans-serif;\n// Full Gill Sans Font Stack\n$sgillsans: Frutiger, 'Frutiger Linotype', Univers, Calibri, 'Myriad Pro', Myriad, 'DejaVu Sans Condensed', 'Liberation Sans', 'Nimbus Sans L', Tahoma, Geneva, 'Gill Sans MT', 'Gill Sans', sans-serif;\n// Terminal / Monospace font\n$terminal: Monaco, 'Lucida Sans Typewriter', Consolas, 'Courier New', monospace;\n","html {\n  font-size: 100%;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  line-height: 1.5;\n  color: #3c3c3c;\n  font-family: Frutiger, \"Frutiger Linotype\", Univers, Calibri, \"Gill Sans\", \"Gill Sans MT\", \"Myriad Pro\", Myriad, \"DejaVu Sans Condensed\", \"Liberation Sans\", \"Nimbus Sans L\", Tahoma, Geneva, \"Helvetica Neue\", Helvetica, sans-serif;\n  font-weight: 400;\n  text-rendering: optimizeLegibility;\n}\n\n.h1,\nh1 {\n  font-size: 2.375rem;\n  line-height: 1.2631578947;\n  margin-top: 1.5rem;\n  margin-bottom: 1.5rem;\n}\n\n.h2,\nh2 {\n  font-size: 1.75rem;\n  line-height: 1.7142857143;\n  margin-top: 1.5rem;\n  margin-bottom: 1.5rem;\n}\n\n.h3,\nh3 {\n  font-size: 1.3125rem;\n  line-height: 1.1428571429;\n  margin-top: 1.5rem;\n  margin-bottom: 0rem;\n}\n\n.h4,\n.h5,\nh4,\nh5 {\n  font-size: 1rem;\n  line-height: 1.5;\n  margin-top: 1.5rem;\n  margin-bottom: 0;\n}\n\n.h1,\n.h2,\n.h4,\n.h5,\nh1,\nh2,\nh3,\nh4,\nh5 {\n  color: #3c3c3c;\n  font-family: \"Gill Sans MT\", \"Gill Sans\", Tahoma, Geneva, sans-serif;\n  font-weight: 400;\n}\n\np {\n  font-size: 1rem;\n  line-height: 1.5;\n  margin-top: 0;\n  margin-bottom: 1.5rem;\n}\n\nol,\nul {\n  font-size: 1rem;\n  line-height: 1.5;\n  margin-top: 0;\n  margin-bottom: 1.5rem;\n}\nol ol,\nul ol {\n  margin-bottom: 0;\n  margin-top: 0;\n}\nol ul,\nul ul {\n  margin-bottom: 0;\n  margin-top: 0;\n}\n\ndl {\n  font-size: 1rem;\n  line-height: 1.5;\n  margin-top: 0;\n  margin-bottom: 1.5rem;\n}\ndl dt {\n  font-weight: 600;\n}\ndl dd {\n  font-style: italic;\n}\n\nblockquote {\n  font-size: 1rem;\n  line-height: 1.5;\n  margin-top: 0;\n  margin-bottom: 1.5rem;\n  font-style: italic;\n}\n\nblockquote > p {\n  padding: 0;\n}\n\na {\n  color: #3c3c3c;\n  text-decoration: none;\n}\na:hover {\n  color: #000;\n  text-decoration: underline;\n}\na:active, a:focus {\n  outline: none;\n  color: #000;\n}\np a {\n  border-bottom: 1px solid #3c3c3c;\n}\n\nhr {\n  border: 0;\n  border-top: 1px solid #96def0;\n  display: block;\n  height: 1px;\n  padding: 0;\n  margin-bottom: 1.5rem;\n}\n\nsub,\nsup {\n  position: relative;\n  top: -0.4rem;\n  vertical-align: baseline;\n}\n\nsub {\n  top: 0.4rem;\n}\n\nb {\n  line-height: 1;\n}\n\nsmall {\n  line-height: 1;\n}\n\nstrong {\n  font-weight: 700;\n  color: #3c3c3c;\n}\n\ncite,\ndfn,\nem,\nq {\n  line-height: 1.5;\n}\n\ncode {\n  font-size: 1rem;\n  line-height: 1.5;\n  margin-top: 0;\n  margin-bottom: 1.5rem;\n}\n\nkbd {\n  margin-bottom: 1px;\n  padding: 0;\n  position: relative;\n  top: -1px;\n}\n\npre {\n  font-size: 1rem;\n  line-height: 1.5;\n  margin-top: 0;\n  margin-bottom: 1.5rem;\n  padding: 0.75rem;\n  border-radius: 0.25rem;\n  background-color: #3c3c3c;\n  color: #eee;\n  font-weight: 700;\n  font-family: Monaco, \"Lucida Sans Typewriter\", Consolas, \"Courier New\", monospace;\n  white-space: pre;\n  word-break: break-all;\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  white-space: pre\\9 ;\n}\n\nhtml {\n  box-sizing: border-box;\n  height: 100%;\n}\nhtml *,\nhtml *:after,\nhtml *:before {\n  box-sizing: inherit;\n}\n\nbody {\n  padding: 0;\n  margin: 0;\n  background-color: #eee;\n  height: 100%;\n}\n\nfigure {\n  padding: 0;\n  margin: 0;\n}\n\nimg {\n  width: 100%;\n  height: auto;\n}\n\n.btn {\n  margin: 0 0 1.5rem 0;\n  padding: 0 0.5rem;\n  line-height: 2.75rem;\n  font-size: 1rem;\n  height: 2.75rem;\n  border-radius: 0;\n  font-family: inherit;\n  text-transform: uppercase;\n  display: inline-block;\n  font-weight: 600;\n  text-align: center;\n  box-sizing: content-box;\n  text-decoration: none;\n  cursor: pointer;\n  color: #3c3c3c;\n  background: #96def0;\n  border-width: 2px 2px 2px 2px;\n  border-style: solid;\n  border-color: #9f9f9f;\n  box-sizing: border-box;\n}\n.btn:hover {\n  color: #3c3c3c;\n  text-decoration: none;\n  background: #53c9e6;\n  border-width: 2px 2px 2px 2px;\n  border-style: solid;\n  border-color: #3c3c3c;\n}\n.btn:focus {\n  color: #3c3c3c;\n  text-decoration: none;\n  background: #3dc2e3;\n  border-width: 2px 2px 2px 2px;\n  border-style: solid;\n  border-color: #3c3c3c;\n}\n.btn:active {\n  color: #3c3c3c;\n  text-decoration: none;\n  background: #69d0ea;\n  border-width: 2px 2px 2px 2px;\n  border-style: solid;\n}\n.btn:disabled {\n  color: #3c3c3c;\n  text-decoration: none;\n  background: #adadad;\n  border-width: 2px 2px 2px 2px;\n  border-style: solid;\n  border-color: #7a7a7a;\n}\n\n.table {\n  font-family: Frutiger, \"Frutiger Linotype\", Univers, Calibri, \"Gill Sans\", \"Gill Sans MT\", \"Myriad Pro\", Myriad, \"DejaVu Sans Condensed\", \"Liberation Sans\", \"Nimbus Sans L\", Tahoma, Geneva, \"Helvetica Neue\", Helvetica, sans-serif;\n  table-layout: fixed;\n  border-collapse: collapse;\n  width: 100%;\n  margin: 24px 0 24px 0;\n  background-color: #fff;\n  border-width: 2px 2px 2px 2px;\n  border-style: solid;\n  border-color: #000;\n}\n.table caption {\n  padding: 1.5rem 0;\n  font-size: 1.375rem;\n  background: #fff;\n  font-family: inherit;\n  font-weight: 700;\n  color: #3c3c3c;\n  text-align: center;\n  border-width: 0 0 1px 0;\n  border-style: solid;\n  border-color: #eee;\n}\n.table thead td,\n.table thead th {\n  padding: 1rem 0;\n  font-size: 1rem;\n  background: #eee;\n  font-family: inherit;\n  font-weight: 400;\n  color: #3c3c3c;\n  text-align: center;\n  border-width: 1px 1px 1px 1px;\n  border-style: solid;\n  border-color: #fff;\n}\n.table tbody td {\n  padding: 0.5rem 0;\n  font-size: 1rem;\n  background: #eee;\n  font-family: inherit;\n  font-weight: 400;\n  color: #3c3c3c;\n  text-align: center;\n  border-width: 1px 1px 1px 1px;\n  border-style: solid;\n  border-color: #fff;\n}\n.table tfoot td {\n  padding: 0.5rem 0;\n  font-size: 1rem;\n  background: #eee;\n  font-family: inherit;\n  font-weight: 400;\n  color: #3c3c3c;\n  text-align: center;\n  border-width: 1px 1px 1px 1px;\n  border-style: solid;\n  border-color: #fff;\n}\n\n.logo a {\n  display: block;\n  width: 5rem;\n  height: 5rem;\n}\n.logo svg {\n  width: 100%;\n  height: 100%;\n}\n@media (max-width: 800px) {\n  .logo {\n    margin: 0 auto;\n  }\n}\n\n.container {\n  max-width: 71.25rem;\n  margin-left: auto;\n  margin-right: auto;\n  width: 96%;\n}\n.container:after {\n  content: \"\";\n  display: table;\n  clear: both;\n}\n\n.wrapper {\n  min-height: 100%;\n  display: grid;\n  grid-template-rows: auto 1fr auto;\n}\n\n.header {\n  max-width: 71.25rem;\n  margin-left: auto;\n  margin-right: auto;\n  width: 96%;\n  display: grid;\n  grid-template-columns: 1fr 2fr;\n  padding: 1.5rem 0;\n  align-items: center;\n}\n.header:after {\n  content: \"\";\n  display: table;\n  clear: both;\n}\n@media (max-width: 800px) {\n  .header {\n    grid-template-columns: 1fr;\n    grid-template-rows: 1fr 1fr;\n    grid-template-rows: auto;\n  }\n}\n\nfooter {\n  background-color: #000;\n}\n\n.footer-inner {\n  max-width: 71.25rem;\n  margin-left: auto;\n  margin-right: auto;\n  width: 96%;\n  padding: 0.75rem 0;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 1fr;\n  row-gap: 0.75rem;\n}\n.footer-inner:after {\n  content: \"\";\n  display: table;\n  clear: both;\n}\n@media (max-width: 800px) {\n  .footer-inner {\n    grid-template-columns: 1fr;\n    grid-template-rows: 1fr 1fr;\n  }\n}\n.footer-inner .menu-list {\n  justify-content: flex-start;\n}\n@media (max-width: 800px) {\n  .footer-inner .menu-list {\n    justify-content: center;\n  }\n}\n.footer-inner .copy {\n  text-align: right;\n}\n@media (max-width: 800px) {\n  .footer-inner .copy {\n    text-align: center;\n  }\n}\n.footer-inner p,\n.footer-inner a {\n  font-size: 1rem;\n  line-height: 1.5;\n  margin-top: 0;\n  margin-bottom: 0rem;\n  color: #eee;\n  font-weight: 600;\n  text-transform: uppercase;\n}\n\n.menu-list {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  display: grid;\n  justify-content: center;\n  text-transform: uppercase;\n  font-weight: 600;\n}\n@media (min-width: 800px) {\n  .menu-list {\n    justify-content: flex-end;\n  }\n}\n\n.form {\n  margin: 0 0 0 0;\n  padding: 0;\n}\n.form legend {\n  margin: 0 0 0 0;\n  line-height: 1.5;\n}\n.form fieldset {\n  margin: 0 0 0 0;\n  padding: 1.5rem 0 1.5rem 0;\n  display: block;\n}\n.form label,\n.form .label {\n  margin: 0 0 0 0;\n  display: inline-block;\n  font-style: inherit;\n  color: #3c3c3c;\n  line-height: 1.5;\n}\n.form input,\n.form select,\n.form textarea {\n  display: inline-block;\n  width: 100%;\n}\n.form .input-text {\n  height: 3rem;\n  margin: 0 0 0 0;\n  font-size: 1rem;\n  padding: 0.5rem;\n  width: 100%;\n  font-family: inherit;\n  box-sizing: border-box;\n  background-color: #fff;\n  border-width: 2px 2px 2px 2px;\n  border-style: solid;\n  border-color: #9f9f9f;\n  color: #3c3c3c;\n}\n.form .input-text:hover {\n  outline: none;\n  background-color: #eee;\n  border-width: 2px 2px 2px 2px;\n  border-style: solid;\n  border-color: #2ecc71;\n  color: #3c3c3c;\n}\n.form .input-text:focus {\n  outline: none;\n  background-color: #eee;\n  border-width: 2px 2px 2px 2px;\n  border-style: solid;\n  border-color: #3c3c3c;\n  color: #3c3c3c;\n}\n.form .input-text:disabled {\n  cursor: disabled;\n  background-color: #9f9f9f;\n  border-width: 2px 2px 2px 2px;\n  border-style: solid;\n  border-color: #adadad;\n  color: #3c3c3c;\n}\n.form textarea {\n  margin: 0 0 0 0;\n  min-height: 9.375rem;\n  position: relative;\n  overflow: auto;\n  outline: none;\n  line-height: 1.5;\n  box-sizing: border-box;\n  resize: vertical;\n}\n.form [type=search] {\n  -webkit-appearance: none;\n}\n.form [list]::-webkit-calendar-picker-indicator {\n  display: none;\n}\n.form .datalist {\n  background-size: 11px 6px;\n  background-position: 98% center;\n  background-origin: content-box;\n  background-repeat: no-repeat;\n  background-image: url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill='%233c3c3c' d='M.758.57h10l-5 5z' fill-rule='evenodd'/%3E%3C/svg%3E\");\n}\n.form [type=color] {\n  height: 3rem;\n  margin: 0 0 0 0;\n  font-size: 1rem;\n  width: 100%;\n  box-sizing: border-box;\n  display: block;\n  background-color: transparent;\n  outline: none;\n  cursor: pointer;\n  padding: 0.25rem;\n  border-width: 2px 2px 2px 2px;\n  border-style: solid;\n  border-color: #9f9f9f;\n}\n.form [type=color]:hover {\n  border-width: 2px 2px 2px 2px;\n  border-style: solid;\n  border-color: #2ecc71;\n}\n.form [type=color]:focus {\n  border-width: 2px 2px 2px 2px;\n  border-style: solid;\n  border-color: #3c3c3c;\n}\n.form [type=color]:focus {\n  border-width: 2px 2px 2px 2px;\n  border-style: solid;\n  border-color: #adadad;\n}\n.form select {\n  height: 3rem;\n  margin: 0 0 0 0;\n  font-size: 1rem;\n  padding: 0.5rem;\n  width: 100%;\n  font-family: inherit;\n  box-sizing: border-box;\n  background-color: #fff;\n  border-width: 2px 2px 2px 2px;\n  border-style: solid;\n  border-color: #9f9f9f;\n  color: #3c3c3c;\n  border-radius: 0;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n}\n.form select:hover {\n  outline: none;\n  background-color: #eee;\n  border-width: 2px 2px 2px 2px;\n  border-style: solid;\n  border-color: #2ecc71;\n  color: #3c3c3c;\n}\n.form select:focus {\n  outline: none;\n  background-color: #eee;\n  border-width: 2px 2px 2px 2px;\n  border-style: solid;\n  border-color: #3c3c3c;\n  color: #3c3c3c;\n}\n.form select:disabled {\n  cursor: disabled;\n  background-color: #9f9f9f;\n  border-width: 2px 2px 2px 2px;\n  border-style: solid;\n  border-color: #adadad;\n  color: #3c3c3c;\n}\n.form select::-ms-expand {\n  display: none;\n}\n.form select[multiple] {\n  height: 100%;\n  height: 7.5rem;\n}\n.form select:not([multiple]) {\n  background-size: 11px 6px;\n  background-position: 98% center;\n  background-origin: content-box;\n  background-repeat: no-repeat;\n  background-image: url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill='%233c3c3c' d='M.758.57h10l-5 5z' fill-rule='evenodd'/%3E%3C/svg%3E\");\n}\n.form [type=range] {\n  width: 100%;\n  margin: 0.75rem;\n  background: transparent;\n  -webkit-appearance: none;\n}\n.form [type=range]::-moz-focus-outer {\n  border: 0;\n}\n.form [type=range]:focus {\n  outline: 0;\n}\n.form [type=range]:focus::-ms-fill-upper, .form [type=range]:focus::-webkit-slider-runnable-track {\n  background: white;\n}\n.form [type=range]:focus::-ms-fill-lower {\n  background: #eee;\n}\n.form [type=range]::-webkit-slider-runnable-track {\n  width: 100%;\n  height: 24px;\n  cursor: default;\n  transition: all 0.2s ease;\n  border-radius: 2px;\n  background: #eee;\n  border-width: 2px;\n  border-style: solid;\n  border-color: #9f9f9f;\n}\n.form [type=range]::-webkit-slider-thumb {\n  box-sizing: border-box;\n  width: 36px;\n  height: 36px;\n  margin-top: -8px;\n  cursor: default;\n  border-radius: 100%;\n  background: #96def0;\n  border-width: 2px;\n  border-style: solid;\n  border-color: #9f9f9f;\n  -webkit-appearance: none;\n}\n.form [type=range]::-moz-range-track {\n  width: 100%;\n  height: 12px;\n  cursor: default;\n  transition: all 0.2s ease;\n  border-radius: 2px;\n  background: #eee;\n  border-width: 2px;\n  border-style: solid;\n  border-color: #9f9f9f;\n}\n.form [type=range]::-moz-range-thumb {\n  box-sizing: border-box;\n  width: 36px;\n  height: 36px;\n  cursor: default;\n  border-radius: 100%;\n  background: #96def0;\n  border-width: 2px;\n  border-style: solid;\n  border-color: #9f9f9f;\n}\n.form [type=range]::-ms-track {\n  width: 100%;\n  height: 24px;\n  cursor: default;\n  transition: all 0.2s ease;\n  color: transparent;\n  border-width: 18px 0;\n  border-color: transparent;\n  background: transparent;\n}\n.form [type=range]::-ms-fill-lower {\n  border-radius: 4px;\n  background: #c8c8c8;\n  border-width: 2px;\n  border-style: solid;\n  border-color: #9f9f9f;\n}\n.form [type=range]::-ms-fill-upper {\n  border-radius: 4px;\n  background: #eee;\n  border-width: 2px;\n  border-style: solid;\n  border-color: #9f9f9f;\n}\n.form [type=range]::-ms-thumb {\n  box-sizing: border-box;\n  width: 36px;\n  height: 36px;\n  margin-top: 6px;\n  cursor: default;\n  border-radius: 100%;\n  background: #96def0;\n  border-width: 2px;\n  border-style: solid;\n  border-color: #9f9f9f;\n}\n.form [type=range]:disabled::-moz-range-thumb, .form [type=range]:disabled::-ms-fill-lower, .form [type=range]:disabled::-ms-fill-upper, .form [type=range]:disabled::-ms-thumb, .form [type=range]:disabled::-webkit-slider-runnable-track, .form [type=range]:disabled::-webkit-slider-thumb {\n  cursor: not-allowed;\n}\n.form .form-addon {\n  display: grid;\n  grid-template-columns: 1fr auto;\n  grid-template-rows: auto auto;\n  grid-template-areas: \"label label\" \"input button\";\n  grid-auto-flow: dense;\n  align-items: center;\n}\n.form .form-addon label {\n  grid-area: label;\n}\n.form .form-addon [type=date],\n.form .form-addon [type=datetime],\n.form .form-addon [type=datetime-local],\n.form .form-addon [type=email],\n.form .form-addon [type=month],\n.form .form-addon [type=number],\n.form .form-addon [type=password],\n.form .form-addon [type=search],\n.form .form-addon [type=tel],\n.form .form-addon [type=text],\n.form .form-addon [type=time],\n.form .form-addon [type=url],\n.form .form-addon [type=week],\n.form .form-addon input,\n.form .form-addon textarea {\n  grid-area: input;\n  width: 100%;\n}\n.form .form-addon select {\n  grid-area: input;\n  width: auto;\n}\n.form .form-addon [type=submit],\n.form .form-addon span,\n.form .form-addon button {\n  grid-area: button;\n  margin: 0 0 0 0;\n  padding: 0 0.5rem;\n  line-height: 2.75rem;\n  font-size: 1rem;\n  height: 2.75rem;\n  border-radius: 0;\n  font-family: inherit;\n  text-transform: uppercase;\n  display: inline-block;\n  font-weight: 600;\n  text-align: center;\n  box-sizing: content-box;\n  text-decoration: none;\n  cursor: pointer;\n  color: #3c3c3c;\n  background: #96def0;\n  border-width: 2px 2px 2px 2px;\n  border-style: solid;\n  border-color: #9f9f9f;\n  white-space: nowrap;\n}\n.form .form-addon [type=submit]:hover,\n.form .form-addon span:hover,\n.form .form-addon button:hover {\n  color: #eee;\n  text-decoration: none;\n  background: #2ecc71;\n  border-width: 2px 2px 2px 2px;\n  border-style: solid;\n  border-color: #3c3c3c;\n}\n.form .form-addon [type=submit]:focus,\n.form .form-addon span:focus,\n.form .form-addon button:focus {\n  color: #eee;\n  text-decoration: none;\n  background: #2ecc71;\n  border-width: 2px 2px 2px 2px;\n  border-style: solid;\n  border-color: #3c3c3c;\n}\n.form .form-addon [type=submit]:active,\n.form .form-addon span:active,\n.form .form-addon button:active {\n  color: #eee;\n  text-decoration: none;\n  background: #2ecc71;\n  border-width: 2px 2px 2px 2px;\n  border-style: solid;\n}\n.form .form-addon [type=submit]:disabled,\n.form .form-addon span:disabled,\n.form .form-addon button:disabled {\n  color: #eee;\n  text-decoration: none;\n  background: #adadad;\n  border-width: 2px 2px 2px 2px;\n  border-style: solid;\n  border-color: #7a7a7a;\n}\n.form .form-addon span {\n  grid-area: icon;\n}\n.form .form-addon.addon-left {\n  grid-template-areas: \"label label\" \"button input\";\n  grid-template-columns: auto 1fr;\n}\n.form .form-addon.addon-left [type=submit],\n.form .form-addon.addon-left span,\n.form .form-addon.addon-left button {\n  border-right: 0;\n}\n.form .form-addon.addon-left [type=submit]:hover,\n.form .form-addon.addon-left span:hover,\n.form .form-addon.addon-left button:hover {\n  border-right: 0;\n}\n.form .form-addon.addon-right [type=submit],\n.form .form-addon.addon-right span,\n.form .form-addon.addon-right button {\n  border-left: 0;\n}\n.form .form-addon.addon-right [type=submit]:hover,\n.form .form-addon.addon-right span:hover,\n.form .form-addon.addon-right button:hover {\n  border-left: 0;\n}\n.form .form-addon.addon-icon {\n  grid-template-columns: auto 2fr auto;\n  grid-template-rows: auto auto;\n  grid-template-areas: \"label label label\" \"icon input button\";\n}\n.form .form-addon.addon-icon span {\n  border-right: 0;\n  display: block;\n}\n.form .form-addon.addon-icon span:hover {\n  border-right: 0;\n  cursor: default;\n  background: #96def0;\n  color: #3c3c3c;\n}\n.form .form-addon.addon-icon [type=submit],\n.form .form-addon.addon-icon button {\n  border-left: 0;\n}\n.form .form-addon.addon-icon [type=submit]:hover,\n.form .form-addon.addon-icon button:hover {\n  border-left: 0;\n}\n.form .valid {\n  color: #2ecc71;\n}\n.form .invalid {\n  color: #f39c12;\n}\n.form .required {\n  color: #971318;\n}\n.form .input-text.valid {\n  border-color: #2ecc71;\n  color: #2ecc71;\n}\n.form .input-text.valid:focus {\n  border-color: #2ecc71;\n  color: #2ecc71;\n}\n.form .input-text.invalid {\n  border-color: #f39c12;\n  color: #f39c12;\n}\n.form .input-text.invalid:focus {\n  border-color: #f39c12;\n  color: #f39c12;\n}\n.form .input-text.required {\n  border-color: #971318;\n  color: #971318;\n}\n.form .input-text.required:focus {\n  border-color: #971318;\n  color: #971318;\n}\n.form .input-image {\n  width: 6.25rem;\n  height: 2.8125rem;\n  margin: 0.75rem 0 0;\n}\n.form [type=range] {\n  margin: 1rem 0 0;\n}\n\n.form-elements {\n  display: grid;\n  grid-column-gap: 1.5rem;\n  grid-row-gap: 1.5rem;\n  grid-template-columns: 1fr;\n}\n@media screen and (min-width: 800px) {\n  .form-elements {\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: auto;\n  }\n}\n@media screen and (min-width: 960px) {\n  .form-elements {\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: auto;\n  }\n}\n.form-elements .form-input {\n  line-height: 0;\n}\n.form-elements .form-input span {\n  display: block;\n  font-size: 1.3125rem;\n  line-height: 1.1428571429;\n  margin-top: 1.5rem;\n  margin-bottom: 1.5rem;\n}\n.form-elements .choices {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\n.radios label {\n  padding-left: 3rem;\n  margin-bottom: 2.25rem;\n  display: inline-block;\n  cursor: pointer;\n  position: relative;\n}\n.radios label::before {\n  width: 2.25rem;\n  height: 2.25rem;\n  bottom: -0.3125rem;\n  content: \"\";\n  color: #2ecc71;\n  display: inline-block;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: #fff;\n  border-width: 2px 2px 2px 2px;\n  border-style: solid;\n  border-color: #9f9f9f;\n}\n.radios [type=checkbox],\n.radios [type=radio] {\n  margin: 0.5rem;\n  margin: 0;\n  padding: 0;\n  vertical-align: middle;\n  display: inline;\n  height: auto;\n  width: auto;\n  position: absolute;\n  left: -99999px;\n}\n.radios [type=checkbox] + label,\n.radios [type=radio] + label {\n  margin-bottom: 2.25rem;\n  margin-left: 0;\n}\n.radios [type=checkbox]:checked + label::before,\n.radios [type=radio]:checked + label::before {\n  content: \"\";\n  background-image: url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M4.932 14.594c-.223-.486-.36-.79-.409-.913l-.567-1.3c-.174-.4-.323-.726-.447-.978l-.344-.692C2.502 9.408 1.718 8.488.812 7.953c1.06-.885 2.006-1.328 2.837-1.328.552 0 .986.211 1.302.632.316.421.586 1.151.809 2.19 1.612-3.03 2.867-5.124 3.766-6.28.806-1.04 1.496-1.728 2.07-2.066.573-.338 1.334-.507 2.282-.507.595 0 1.24.113 1.934.341-1.618 1.051-3.383 2.78-5.296 5.183-1.912 2.404-3.774 5.23-5.584 8.476z' fill='%232ecc71' fill-rule='evenodd'/%3E%3C/svg%3E\");\n  background-size: 15px 14px;\n  background-repeat: no-repeat;\n  background-position: center center;\n  border-width: 2px 2px 2px 2px;\n  border-style: solid;\n  border-color: #2ecc71;\n}\n.radios [type=checkbox]:focus + label::before,\n.radios [type=radio]:focus + label::before {\n  border-width: 2px 2px 2px 2px;\n  border-style: solid;\n  border-color: #3c3c3c;\n  color: #2ecc71;\n  background-color: #eee;\n}\n.radios [type=checkbox]:focus:checked + label::before,\n.radios [type=radio]:focus:checked + label::before {\n  border-width: 2px 2px 2px 2px;\n  border-style: solid;\n  border-color: #2ecc71;\n  color: #2ecc71;\n  background-color: #eee;\n}\n.radios [type=checkbox]:hover + label::before,\n.radios [type=radio]:hover + label::before {\n  border-width: 2px 2px 2px 2px;\n  border-style: solid;\n  color: #2ecc71;\n  background-color: #eee;\n}\n.radios [type=checkbox]:hover:checked + label::before,\n.radios [type=radio]:hover:checked + label::before {\n  border-width: 2px 2px 2px 2px;\n  border-style: solid;\n  border-color: #69dd9a;\n  color: #2ecc71;\n}\n.radios [type=radio] + label::before {\n  border-radius: 50%;\n}\n.radios [type=radio]:checked + label::before {\n  content: \"\";\n  background-image: url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg'%3E%3Ccircle fill='%232ecc71' cx='5' cy='5' r='5' fill-rule='evenodd'/%3E%3C/svg%3E\");\n  background-size: 10px 10px;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n.error-box {\n  border: 1px solid #971318;\n  background-color: #fbe1e2;\n  padding: 0.5rem;\n  color: #971318;\n}\n.error-box p {\n  font-size: 1rem;\n  line-height: 1.5;\n  margin-top: 0;\n  margin-bottom: 0;\n}","// ======================================================================\n// Slate Framework <hello@slateengine.com>\n// ======================================================================\n//\n// ======================================================================\n// Helpers\n// ======================================================================\n/// Fix stupid box model in stupid browsers.\n/// @example scss\n/// html {\n///     @include fix-box-model;\n/// }\n/// @group Helpers\n@mixin fix-box-model {\n  box-sizing: border-box;\n\n  *,\n  *:after,\n  *:before {\n    box-sizing: inherit;\n  }\n}\n/// Multiple Clearfixes in one mixin! Use modern, PIE or Mojo Clearfixes, depending on your needs.\n/// @example scss - Clearfix\n/// .yourelement {\n///   @include clearfix(modern);\n///   @include clearfix(pie);\n///   @include clearfix(mojo);\n///      ...\n/// }\n/// @link http://www.positioniseverything.net/easyclearing.html\n/// @link http://cssmojo.com/latest_new_clearfix_so_far/\n/// @param {string} $fix-type [modern] - Desired CSS property\n/// @group Clearfix\n@mixin clearfix($fix-type: \"modern\") {\n  // Moden clearfix.\n  @if $fix-type == \"modern\" {\n    overflow: hidden;\n  }\n  // Position is everything clearfix clearfix.\n  @if $fix-type == \"pie\" {\n    *zoom: 1;\n\n    &:after {\n      content: \"\\0020\";\n      display: block;\n      height: 0;\n      clear: both;\n      overflow: hidden;\n      visibility: hidden;\n    }\n  }\n  // Mojo Clearfix.\n  @if $fix-type == \"mojo\" {\n    &:after {\n      content: \"\";\n      display: table;\n      clear: both;\n    }\n  }\n}\n/// iFrame / Object / Emded helper to make those elements responsive. Works a treat on things like google maps and youtube videos.\n/// Apply this to the PARENT element, not the iframe.\n/// @example scss - IOE\n/// .yourelement {\n///   @include ioe;\n///      ...\n/// }\n/// @group Media\n@mixin ioe {\n  height: 0;\n  padding-bottom: to-percentage($ioe-padding);\n  position: relative;\n\n  canvas,\n  embed,\n  iframe,\n  object,\n  video {\n    border: 0;\n    height: 100%;\n    left: 0;\n    position: absolute;\n    top: 0;\n    user-select: none;\n    width: 100%;\n  }\n}\n// Min-Width Media Query Mixin\n/// @example scss\n///     @include break(sm) {\n/// display: block;\n/// }\n/// @group Helpers\n@mixin minbreak($size: 640px) {\n  @media screen and (min-width: rem-convert(px, $size)) {\n    @content;\n  }\n}\n/// Max-Width Media Query Mixin\n/// @example scss\n///     @include break(sm) {\n/// display: block;\n/// }\n/// @group Helpers\n@mixin maxbreak($size: 640px) {\n  @media screen and (max-width: rem-convert(px, $size)) {\n    @content;\n  }\n}\n/// Retina Media Query Mixin\n/// @example scss\n///     @include retina {\n///     ...\n/// }\n/// @group Helpers\n@mixin retina {\n  @media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2 / 1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx) {\n    @content;\n  }\n}\n/// Print Mixin\n/// @example scss\n///     @include print {\n///     ...\n/// }\n/// @group Helpers\n@mixin print {\n  @media print {\n    @content;\n  }\n}\n/// REM Calculator. Generate REM sizes from a pixel value on almost any css property\n/// @example scss - Free Type\n///     .yourelement {\n///       @include rem(margin-top, 16px);\n///     }\n///     .yourelement {\n///       @include rem(margin, 16px 20px 16px 20px);\n///     }\n/// @param {string} $properties - Desired CSS property\n/// @param {number} $values - Desired values to convert\n/// @group Helpers\n@mixin rem($properties, $values...) {\n  @if type-of($properties) == \"map\" {\n    @each $property in map-keys($properties) {\n      @include rem($property, map-get($properties, $property));\n    }\n  } @else {\n    @each $property in $properties {\n      @if $rem-fallback or $rem-px-only {\n        #{$property}: rem-convert(px, $values...);\n      }\n      @if not $rem-px-only {\n        #{$property}: rem-convert(rem, $values...);\n      }\n    }\n  }\n}\n","// ======================================================================\n// 04-elements - HTML\n// ======================================================================\n\nhtml {\n  @include fix-box-model;\n  height: 100%;\n}\n","// ======================================================================\n// 04-elements - Body\n// ======================================================================\n\nbody {\n  padding: 0;\n  margin: 0;\n  background-color: #eee;\n  height: 100%;\n}\n","// ======================================================================\n// 04-elements - Media\n// ======================================================================\n\nfigure {\n  padding: 0;\n  margin: 0;\n}\n\nimg {\n  width: 100%;\n  height: auto;\n}\n","// ======================================================================\n// 04-elements - Buttons\n// ======================================================================\n\n.btn {\n  @include button;\n  box-sizing: border-box;\n}\n","// ======================================================================\n// Slate Framework <hello@slateengine.com>\n// ======================================================================\n//\n// ======================================================================\n// Slate Buttons\n// ======================================================================\n\n\n@mixin buttonbase($map-name: $button-default) {\n  @include rem(margin, map-get($map-name, 'margin'));\n  @include rem(padding, map-get($map-name, 'padding'));\n  @include rem(line-height, map-get($map-name, 'height'));\n  @include rem(font-size, map-get($map-name, 'font-size'));\n  @include rem(height, map-get($map-name, 'height'));\n  @include rem(border-radius, map-get($map-name, 'rounded'));\n  font-family: map-get($map-name, 'font-family');\n  text-transform: map-get($map-name, 'text-transform');\n  display: map-get($map-name, 'display');\n  font-weight: map-get($map-name, 'textweight');\n  text-align: map-get($map-name, 'textalign');\n  box-sizing: map-get($map-name, 'boxsizing');\n  text-decoration: none;\n  cursor: pointer;\n  // Reactive Text Color\n  @include lightness(map-get($map-name, 'default'), map-get($map-name, 'textlight'), map-get($map-name, 'textdark'));\n  // Background Color\n  background: map-get($map-name, 'default');\n  // Borders\n  @if map-get($map-name, 'use-borders') == true {\n    @include borders(map-get($map-name, 'border-width'), map-get($map-name, 'border-style'), map-get($map-name, 'border-color'));\n  } @else {\n    border: 0;\n  }\n}\n\n\n/// Button mixin lets you quickly make flat ui style buttons consistently accross all types of buttons (input, button and anchor).\n/// @example scss - Default Button using default sass map\n/// .button {\n///     @include button;\n/// }\n/// @example scss - Custom Button using custom sass map\n/// .button {\n///     @include button($my-map);\n/// }\n/// @author Hash&Salt\n/// @param {Variable} $map-name [$button-default] - Skin variable to use for the button.\n/// @group Buttons\n\n@mixin button($map-name: $button-default) {\n  // Base Button Style\n  @include buttonbase($map-name);\n\n  &:hover {\n    // Reactive Text Color\n    @include lightness(map-get($map-name, 'hover'), map-get($map-name, 'textlight'), map-get($map-name, 'textdark'));\n    text-decoration: none;\n    background: map-get($map-name, 'hover');\n    @if map-get($map-name, 'use-borders') == true {\n      @include borders(map-get($map-name, 'border-width'), map-get($map-name, 'border-style'), map-get($map-name, 'border-hover-color'));\n    } @else {\n      border: 0;\n    }\n  }\n\n  &:focus {\n    // Reactive Text Color\n    @include lightness(map-get($map-name, 'focus'), map-get($map-name, 'textlight'), map-get($map-name, 'textdark'));\n    text-decoration: none;\n    background: map-get($map-name, 'focus');\n    @if map-get($map-name, 'use-borders') == true {\n      @include borders(map-get($map-name, 'border-width'), map-get($map-name, 'border-style'), map-get($map-name, 'border-focus-color'));\n    } @else {\n      border: 0;\n    }\n  }\n\n  &:active {\n    // Reactive Text Color\n    @include lightness(map-get($map-name, 'active'), map-get($map-name, 'textlight'), map-get($map-name, 'textdark'));\n    text-decoration: none;\n    background: map-get($map-name, 'active');\n    @if map-get($map-name, 'use-borders') == true {\n      @include borders(map-get($map-name, 'border-width'), map-get($map-name, 'border-style'), map-get($map-name, 'border-active-color'));\n    } @else {\n      border: 0;\n    }\n  }\n\n  &:disabled {\n    // Reactive Text Color\n    @include lightness(map-get($map-name, 'active'), map-get($map-name, 'textlight'), map-get($map-name, 'textdark'));\n    text-decoration: none;\n    background: map-get($map-name, 'disabled');\n    @if map-get($map-name, 'use-borders') == true {\n      @include borders(map-get($map-name, 'border-width'), map-get($map-name, 'border-style'), map-get($map-name, 'border-disabled-color'));\n    } @else {\n      border: 0;\n    }\n  }\n}\n\n\n/// Gradient button mixin lets you quickly make gradient buttons consistently accross all types of buttons (input, button and anchor).\n/// @example scss - Default Gradient button using default gradient color map\n/// .button {\n///     @include button-gradient;\n/// }\n/// @example scss - Custom gradient button using custom color map\n/// .button {\n///     @include button-gradient($my-map);\n/// }\n/// @param {Variable} $map-name [$button-gradient] - Skin variable to use for the gradient button.\n/// @group Buttons\n\n@mixin button-gradient($map-name: $button-gradient) {\n  // Gradient Button Style\n  // Base Button Style\n  @include buttonbase($map-name);\n  @include lightness(map-get($map-name, 'start-color'), map-get($map-name, 'textlight'), map-get($map-name, 'textdark'));\n  @if map-get($map-name, 'use-borders') == true {\n    @include borders(map-get($map-name, 'border-width'), map-deep-get($map-name, 'border-style'), map-deep-get($map-name, 'border-color'));\n  } @else {\n    border: 0;\n  }\n  // Left to right\n  @if map-get($map-name, mode) == 'ltr' {\n    @include gradient-horizontal(map-get($map-name, 'start-color'), map-get($map-name, 'end-color'), map-get($map-name, 'start-pos'), map-get($map-name, 'end-pos'));\n\n    &:hover {\n      @include gradient-horizontal(map-get($map-name, 'start-color-hover'), map-get($map-name, 'end-color-hover'), map-get($map-name, 'start-pos'), map-get($map-name, 'end-pos'));\n      @include lightness(map-get($map-name, 'start-color'), map-get($map-name, 'textlight'), map-get($map-name, 'textdark'));\n      text-decoration: none;\n      @if map-get($map-name, 'use-borders') == true {\n        @include borders(map-get($map-name, 'border-width'), map-deep-get($map-name, 'border-style'), map-deep-get($map-name, 'border-hover-color'));\n      } @else {\n        border: 0;\n      }\n    }\n\n    &:focus {\n      @include gradient-horizontal(map-get($map-name, 'start-color-focus'), map-get($map-name, 'end-color-focus'), map-get($map-name, 'start-pos'), map-get($map-name, 'end-pos'));\n      @include lightness(map-get($map-name, 'start-color'), map-get($map-name, 'textlight'), map-get($map-name, 'textdark'));\n      outline: none;\n      text-decoration: none;\n      @if map-get($map-name, 'use-borders') == true {\n        @include borders(map-get($map-name, 'border-width'), map-deep-get($map-name, 'border-style'), map-deep-get($map-name, 'border-focus-color'));\n      } @else {\n        border: 0;\n      }\n    }\n\n    &:active {\n      @include gradient-horizontal(map-get($map-name, 'start-color-hover'), map-get($map-name, 'end-color-hover'), map-get($map-name, 'start-pos'), map-get($map-name, 'end-pos'));\n      @include lightness(map-get($map-name, 'start-color'), map-get($map-name, 'textlight'), map-get($map-name, 'textdark'));\n      text-decoration: none;\n      @if map-get($map-name, 'use-borders') == true {\n        @include borders(map-get($map-name, 'border-width'), map-deep-get($map-name, 'border-style'), map-deep-get($map-name, 'border-active-color'));\n      } @else {\n        border: 0;\n      }\n    }\n\n    &:disabled {\n      @include gradient-horizontal(map-get($map-name, 'start-color-disabled'), map-get($map-name, 'end-color-disabled'));\n      @include lightness(map-get($map-name, 'start-color'), map-get($map-name, 'textlight'), map-get($map-name, 'textdark'));\n      text-decoration: none;\n      @if map-get($map-name, 'use-borders') == true {\n        @include borders(map-get($map-name, 'border-width'), map-deep-get($map-name, 'border-style'), map-deep-get($map-name, 'border-disabled-color'));\n      } @else {\n        border: 0;\n      }\n    }\n  }\n\n  @if map-get($map-name, mode) == 'ttb' {\n    @include gradient-vertical(map-get($map-name, 'start-color'), map-get($map-name, end-color), map-get($map-name, 'start-pos'), map-get($map-name, 'end-pos'));\n    @include lightness(map-get($map-name, 'start-color'), map-get($map-name, 'textlight'), map-get($map-name, 'textdark'));\n\n    &:hover {\n      @include gradient-vertical(map-get($map-name, 'start-color-hover'), map-get($map-name, 'end-color-hover'), map-get($map-name, 'start-pos'), map-get($map-name, 'end-pos'));\n      text-decoration: none;\n      @if map-get($map-name, 'use-borders') == true {\n        @include borders(map-get($map-name, 'border-width'), map-deep-get($map-name, 'border-style'), map-deep-get($map-name, 'border-hover-color'));\n      } @else {\n        border: 0;\n      }\n    }\n\n    &:focus {\n      @include gradient-vertical(map-get($map-name, 'start-color-hover'), map-get($map-name, 'end-color-hover'), map-get($map-name, 'start-pos'), map-get($map-name, 'end-pos'));\n      outline: none;\n      text-decoration: none;\n      @if map-get($map-name, 'use-borders') == true {\n        @include borders(map-get($map-name, 'border-width'), map-deep-get($map-name, 'border-style'), map-deep-get($map-name, 'border-focus-color'));\n      } @else {\n        border: 0;\n      }\n    }\n\n    &:active {\n      @include gradient-vertical(map-get($map-name, 'start-color-hover'), map-get($map-name, 'end-color-hover'), map-get($map-name, 'start-pos'), map-get($map-name, 'end-pos'));\n      text-decoration: none;\n      @if map-get($map-name, 'use-borders') == true {\n        @include borders(map-get($map-name, 'border-width'), map-deep-get($map-name, 'border-style'), map-deep-get($map-name, 'border-active-color'));\n      } @else {\n        border: 0;\n      }\n    }\n\n    &:disabled {\n      @include gradient-vertical(map-get($map-name, 'start-color-disabled'), map-get($map-name, 'end-color-disabled'));\n      @if map-get($map-name, 'use-borders') == true {\n        @include borders(map-get($map-name, 'border-width'), map-deep-get($map-name, 'border-style'), map-deep-get($map-name, 'border-disabled-color'));\n      } @else {\n        border: 0;\n      }\n    }\n  }\n\n  @if map-get($map-name, mode) == 'rad' {\n    @include gradient-radial(map-get($map-name, 'start-color'), map-get($map-name, end-color));\n    @include lightness(map-get($map-name, 'start-color'), map-get($map-name, 'textlight'), map-get($map-name, 'textdark'));\n\n    &:hover {\n      @include gradient-radial(map-get($map-name, 'start-color-hover'), map-get($map-name, 'end-color-hover'));\n      text-decoration: none;\n      @if map-get($map-name, 'use-borders') == true {\n        @include borders(map-get($map-name, 'border-width'), map-deep-get($map-name, 'border-style'), map-deep-get($map-name, 'border-hover-color'));\n      } @else {\n        border: 0;\n      }\n    }\n\n    &:focus {\n      @include gradient-radial(map-get($map-name, 'start-color-focus'), map-get($map-name, 'end-color-focus'));\n      outline: none;\n      text-decoration: none;\n      @if map-get($map-name, 'use-borders') == true {\n        @include borders(map-get($map-name, 'border-width'), map-deep-get($map-name, 'border-style'), map-deep-get($map-name, 'border-focus-color'));\n      } @else {\n        border: 0;\n      }\n    }\n\n    &:active {\n      @include gradient-radial(map-get($map-name, 'start-color-active'), map-get($map-name, 'end-color-active'));\n      text-decoration: none;\n      @if map-get($map-name, 'use-borders') == true {\n        @include borders(map-get($map-name, 'border-width'), map-deep-get($map-name, 'border-style'), map-deep-get($map-name, 'border-active-color'));\n      } @else {\n        border: 0;\n      }\n    }\n\n    &:disabled {\n      @include gradient-radial(map-get($map-name, 'start-color-disabled'), map-get($map-name, 'end-color-disabled'));\n      text-decoration: none;\n      @if map-get($map-name, 'use-borders') == true {\n        @include borders(map-get($map-name, 'border-width'), map-deep-get($map-name, 'border-style'), map-deep-get($map-name, 'border-disabled-color'));\n      } @else {\n        border: 0;\n      }\n    }\n  }\n}\n","// ======================================================================\n// Slate Framework <hello@slateengine.com>\n// ======================================================================\n//\n// ======================================================================\n// Utility Functions\n// ======================================================================\n\n@mixin ios {\n  @supports (-webkit-overflow-scrolling: touch) {\n    @content;\n  }\n}\n\n// Deep Map Get\n// ======================================================================\n\n/// Map deep get\n/// @author Hugo Giraudel\n/// @param {Map} $map - Map\n/// @param {Arglist} $keys - Key chain\n/// @return {*} - Desired value\n@function map-deep-get($map, $keys...) {\n  @each $key in $keys {\n    $map: map-get($map, $key);\n  }\n  @return $map;\n}\n\n/// Update a key deeply nested\n/// @author Hugo Giraudel\n/// @param {Map} $map - Map to update\n/// @param {Arglist} $keys - Keys to access to value to update\n/// @param {*} $value - New value (last member of `$keys`)\n/// @return {Map} - Updated map\n@function map-deep-set($map, $keys.../*, $value */) {\n  $map-list: ($map,);\n  $result: null;\n\n  @if length($keys) == 2 {\n    @return map-merge($map, (nth($keys, 1): nth($keys, -1)));\n  }\n\n  @for $i from 1 through length($keys) - 2 {\n    $map-list: append($map-list, map-get(nth($map-list, -1), nth($keys, $i)));\n  }\n\n  @for $i from length($map-list) through 1 {\n    $result: map-merge(nth($map-list, $i), (nth($keys, $i): if($i == length($map-list), nth($keys, -1), $result)));\n  }\n\n  @return $result;\n}\n\n/// Compute the maximum depth of a map\n/// @param {Map} $map\n/// @return {Number} max depth of `$map`\n@function map-depth($map) {\n  $level: 1;\n\n  @each $key, $value in $map {\n    @if type-of($value) == \"map\" {\n      $level: max(map-depth($value) + 1, $level);\n    }\n  }\n\n  @return $level;\n}\n\n/// Test if map got all `$keys` at first level\n/// @author Hugo Giraudel\n/// @param {Map} $map - Map\n/// @param {Arglist} $keys - Keys to test\n/// @return {Bool}\n@function map-has-keys($map, $keys...) {\n  @each $key in $keys {\n    @if not map-has-key($map, $key) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n/// Test if map got all `$keys` nested with each others\n/// @author Hugo Giraudel\n/// @param {Map} $map - Map\n/// @param {Arglist} $keys - Keys to test\n/// @return {Bool}\n@function map-has-nested-keys($map, $keys...) {\n  @each $key in $keys {\n    @if not map-has-key($map, $key) {\n      @return false;\n    }\n    $map: map-get($map, $key);\n  }\n\n  @return true;\n}\n\n/// An equivalent of `zip` function but for maps.\n/// Takes two lists, the first for keys, second for values.\n/// @param {List} $keys - Keys for map\n/// @param {List} $values - Values for map\n/// @return {Map} Freshly created map\n/// @see http://sass-lang.com/documentation/Sass/Script/Functions.html#zip-instance_method\n@function map-zip($keys, $values) {\n  $l-keys: length($keys);\n  $l-values: length($values);\n  $min: min($l-keys, $l-values);\n  $map: ();\n\n  @if $l-keys != $l-values {\n    @warn \"There are #{$l-keys} key(s) for #{$l-values} value(s) in the map for `map-zip`. \"\n        + \"Resulting map will only have #{$min} pairs.\";\n  }\n\n  @if $min == 0 {\n    @return $map;\n  }\n\n  @for $i from 1 through $min {\n    $map: map-merge($map, (nth($keys, $i): nth($values, $i)));\n  }\n\n  @return $map;\n}\n\n/// jQuery-style extend function\n/// About `map-merge()`:\n/// * only takes 2 arguments\n/// * is not recursive\n/// @param {Map} $map - first map\n/// @param {ArgList} $maps - other maps\n/// @param {Bool} $deep - recursive mode\n/// @return {Map}\n\n@function map-extend($map, $maps.../*, $deep */) {\n  $last: nth($maps, -1);\n  $deep: $last == true;\n  $max: if($deep, length($maps) - 1, length($maps));\n\n  // Loop through all maps in $maps...\n  @for $i from 1 through $max {\n    // Store current map\n    $current: nth($maps, $i);\n\n    // If not in deep mode, simply merge current map with map\n    @if not $deep {\n      $map: map-merge($map, $current);\n    } @else {\n      // If in deep mode, loop through all tuples in current map\n      @each $key, $value in $current {\n\n        // If value is a nested map and same key from map is a nested map as well\n        @if type-of($value) == \"map\" and type-of(map-get($map, $key)) == \"map\" {\n          // Recursive extend\n          $value: map-extend(map-get($map, $key), $value, true);\n        }\n\n        // Merge current tuple with map\n        $map: map-merge($map, ($key: $value));\n      }\n    }\n  }\n\n  @return $map;\n}\n\n// Lightness\n@mixin lightness($bgcolor, $lightcolor, $darkcolor, $diff: 50) {\n  color: colorcompare($bgcolor, $lightcolor, $darkcolor, $diff);\n}\n\n// Borders\n@mixin borders($width, $style, $color) {\n    border-width: $width;\n    border-style: $style;\n    border-color: $color;\n}\n\n// Switch Color light / dark based on background contrast\n// ======================================================================\n@function colorcompare($bgcolor, $lightcolor: $bright, $darkcolor: $dark, $diff, ) {\n  @if (lightness($bgcolor) > $diff) {\n    @return $darkcolor; // Lighter backgorund, return dark color\n  } @else {\n    @return $lightcolor; // Darker background, return light color\n  }\n}\n","// ======================================================================\n// 04-elements - Table\n// ======================================================================\n\n.table {\n  @include table();\n}\n","// ======================================================================\n// Slate Framework <hello@slateengine.com>\n// ======================================================================\n//\n// ======================================================================\n// Slate Tables\n// ======================================================================\n/// Quickly skin tables using variables from a SASS map\n/// @example scss - Tables\n/// table {\n///     @include table($default-table);\n/// }\n/// @author Hash&Salt\n/// @param {Variable} $table-skin [$default-table] - SASS map to use for the skin.\n/// @group Tables\n\n@mixin tableelement($table-skin: $default-table, $el) {\n  @include rem(padding, map-deep-get($table-skin, $el, 'padding'));\n  @include rem(font-size, map-deep-get($table-skin, $el, 'fontsize'));\n  background: map-deep-get($table-skin, $el, 'background');\n  font-family: map-deep-get($table-skin, $el, 'fontfamily');\n  font-weight: map-deep-get($table-skin, $el, 'fontweight');\n  color: map-deep-get($table-skin, $el, 'fontcolor');\n  text-align: map-deep-get($table-skin, $el, 'textalign');\n  @include borders(map-deep-get($table-skin, $el, 'borderwidth'), map-deep-get($table-skin, $el, 'borderstyle'), map-deep-get($table-skin, $el, 'bordercolor'));\n}\n\n@mixin table($table-skin: $default-table) {\n  font-family: map-deep-get($table-skin, 'fontfamily');\n  table-layout: map-deep-get($table-skin, 'layout');\n  border-collapse: map-deep-get($table-skin, 'bordercollapse');\n  width: map-deep-get($table-skin, 'width');\n  margin: map-deep-get($table-skin, 'margin');\n  background-color: map-deep-get($table-skin, 'background');\n  @include borders(map-deep-get($table-skin, 'borderwidth'), map-deep-get($table-skin, 'borderstyle'), map-deep-get($table-skin, 'bordercolor'));\n\n  caption {\n    @include tableelement($table-skin, 'caption');\n  }\n\n  thead {\n    td,\n    th {\n      @include tableelement($table-skin, 'header');\n    }\n  }\n\n  tbody {\n    td {\n      @include tableelement($table-skin, 'body');\n    }\n  }\n\n  tfoot {\n    td {\n      @include tableelement($table-skin, 'footer');\n    }\n  }\n}\n","// ======================================================================\n// 05-objects - Logo\n// ======================================================================\n\n.logo {\n  a {\n    display: block;\n    width: rem(80px);\n    height: rem(80px);\n  }\n\n  svg {\n    width: 100%;\n    height: 100%;\n  }\n  @include media(\"<medium\") {\n    margin: 0 auto;\n  }\n}\n","// ======================================================================\n// Slate Framework <hello@slateengine.com>\n// ======================================================================\n//\n// ======================================================================\n// Slate Media Queries\n// ======================================================================\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @author Eduardo Boucas\n///\n/// @param {List}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media(\">phone\") { }\n///\n/// @example scss - With two set breakpoints\n///  @include media(\">phone\", \"<=tablet\") { }\n///\n/// @example scss - With custom values\n///  @include media(\">=358px\", \"<850px\") { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media(\">desktop\", \"<=1350px\") { }\n///\n/// @example scss - With a static expression\n///  @include media(\"retina2x\") { }\n///\n/// @example scss - Mixing everything\n///  @include media(\">=350px\", \"<tablet\", \"retina3x\") { }\n///\n@mixin media($conditions...) {\n  @for $i from 1 through length($conditions) {\n    $conditions: set-nth($conditions, $i, parse-expression(nth($conditions, $i)));\n  }\n\n  $branches: get-query-branches($conditions);\n  $query: '';\n\n  @each $branch in $branches {\n    @if (str-length($query) != 0) {\n      $query: $query + ', ';\n    }\n\n    $query: $query + $branch;\n  }\n\n  @media #{$query} {\n    @content;\n  }\n}\n","// ======================================================================\n// 05-objects - Container\n// ======================================================================\n\n.container {\n  @include container;\n}\n","// ======================================================================\n// Slate Framework <hello@slateengine.com>\n// ======================================================================\n//\n// ======================================================================\n// Slate Grid\n// ======================================================================\n// Insipired by:\n// -------------------\n// Profound Grid: http://www.profoundgrid.com/\n// Semantic Grid: http://www.semantic.gs\n// Susy: http://susy.oddbird.net\n// Negative Grid: http://chrisplaneta.com/freebies/negativegrid-fluid-css-grid-by-chris-planeta/\n// ======================================================================\n/// Establish the grid-containing element. This is wrapper element for your columns.\n/// @example scss - Container\n/// .element {\n///     @include container;\n/// }\n/// @param {Variable} $grid-max-width [$center-container-max-width] - Maximum width that the containers will grow too.\n/// @param {Variable} $grid-center [$center-containers] - Center the container on the page without the need for additional markup\n/// @group Grid\n@mixin container($grid-max-width: $center-container-max-width, $grid-center: $center-containers, $c-margin: $container-margin) {\n  @include clearfix('mojo');\n  @if $grid-center {\n    @include rem(max-width, $grid-max-width);\n    margin: {\n      left: auto;\n      right: auto;\n    }\n    width: container-width($c-margin);\n  } @else {\n    width: container-width($c-margin);\n    margin-left: $c-margin;\n    margin-right: $c-margin;\n  }\n}\n/// Define columns.\n/// @example scss - Column\n/// .element {\n///     @include container;\n///     .col {@include column(6,3);}\n/// }\n/// @param {Variable} $columns-width - How many columns to span\n/// @param {Variable} $padding-columns - How many columns to push over by\n/// @group Grid\n@mixin column($columns-width, $padding-columns: null, $g-width: $gutter-width) {\n  float: left;\n  margin-right: -100%;\n  $width-perc: element-width($columns-width, $g-width);\n  width: $width-perc;\n  @if $padding-columns != null {\n    @include push($padding-columns, $g-width);\n  }\n}\n/// Push columns over.\n/// @example scss - Push\n/// .wrapper {\n///     @include container;\n///     .col {@include column(6); @include push(3);}\n/// }\n/// @param {Variable} $column-index - How many columns to push over by\n/// @group Grid\n@mixin push($column-index, $g-width: $gutter-width) {\n  $width-perc: 0;\n  @if $total-width == 100% {\n    $width-perc: $g-width + element-width($column-index, $g-width);\n  } @else {\n    // $width-perc: (column_width() + $g-width)*$column-index;\n    $width-perc: $g-width + element-width($column-index, $g-width);\n  }\n  margin-left: $width-perc;\n}\n// HELPER MIXINS\n/// Not really recommended, but if you like using a whole load of predefined classes, this is for you. It uses the column and container classes defined in the config.scss to generate CSS for a container, all columns as defined in $total-columns, and all matching push classes. Warning: This will add CSS to your project that you may or may not use.\n/// @example scss - Helper Classes\n///   @include generate_helper_classes;\n/// @example html - Helper Classes\n/// <div class='row'>\n/// <div class='col6 push3'>6 wide column pushed over by 3</div>\n/// </div>\n/// @param {Variable} $helper-break [medium] - The breakpoint at which the columns stack up into full width columns.\n/// @group Grid\n@mixin generate-helper-classes($helper-break: $bp-medium) {\n  // Helper Class: Container\n  .#{$class-container} {\n    @include container;\n  }\n  // Helper Class: Columns\n  @for $i from 1 through $total-columns {\n    .#{$class-column}#{$i} {\n      @include column(12);\n      margin-bottom: $column-bottom-spacing;\n      clear: both;\n    }\n  }\n  @include minbreak($helper-break) {\n    // Helper Class: Columns\n    @for $i from 1 through $total-columns {\n      .#{$class-column}#{$i} {\n        @include column($i);\n        clear: none;\n      }\n    }\n    // Helper Class: Horizontal Position\n    @for $i from 0 through $total-columns - 1 {\n      .#{$class-push}#{$i} {\n        @include push($i);\n        margin-bottom: $column-bottom-spacing;\n      }\n    }\n  }\n}\n/// Use this to push equal columns over with the same class, for example a page equal sized product thumbnails or portfolio of images.\n/// Just so you know, it's much easier and more flexible to do this with the Gridler mixin :)\n/// @example scss - Grid Positions\n/// .wrapper {\n///     @include container;\n///     .positioncol {@include column(3);}\n///     @include generate_grid_positions('positioncol', 3, 26px);\n/// }\n/// @example html - Grid Positions\n/// <div class='container'>\n/// <div class='positioncol'>A Pushed Column</div>\n/// <div class='positioncol'>A Pushed Column</div>\n/// <div class='positioncol'>A Pushed Column</div>\n/// <div class='positioncol'>A Pushed Column</div>\n/// </div>\n/// @param {Variable} $column-selector - The class name of the element to effect.\n/// @param {Variable} $element-width - Desired column width.\n/// @param {Variable} $ggsp [$column-bottom-spacing] - Space under the repeated columns.\n/// @group Grid\n@mixin generate-grid-positions($column-selector, $element-width, $ggsp: $column-bottom-spacing, $g-width: $gutter-width) {\n  $cols-per-row: floor($total-columns / $element-width);\n  @for $i from 1 through $cols-per-row {\n    #{$column-selector}:nth-child(#{$cols-per-row}n+#{$i}) {\n      @include push(($i - 1) * $element-width, $g-width);\n      @include rem(margin-bottom, $ggsp);\n      @if $i == 1 {\n        clear: both;\n      } @else {\n        clear: none;\n      }\n    }\n  }\n}\n","// ======================================================================\n// 05-objects - Wrapper\n// ======================================================================\n\n.wrapper {\n  min-height: 100%;\n  display: grid;\n  grid-template-rows: auto 1fr auto;\n}\n","// ======================================================================\n// 06-components - Site Header\n// ======================================================================\n\n.header {\n  @include container;\n  display: grid;\n  grid-template-columns: 1fr 2fr;\n  @include media(\"<medium\") {\n    grid-template-columns: 1fr;\n    grid-template-rows: 1fr 1fr;\n    grid-template-rows: auto;\n  }\n  padding: rem(24px) 0;\n  align-items: center;\n}\n","// ======================================================================\n// 06-components - Footer\n// ======================================================================\n\n\nfooter {\n  background-color: $jet;\n}\n\n.footer-inner {\n  @include container;\n\n  padding: rem(12px) 0;\n\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 1fr;\n  row-gap: rem(12px);\n\n  @include media(\"<medium\") {\n    grid-template-columns: 1fr;\n    grid-template-rows: 1fr 1fr;\n  }\n\n\n  .menu-list {\n    justify-content: flex-start;\n\n    @include media(\"<medium\") {\n      justify-content: center;\n    }\n  }\n\n  .copy {\n    text-align: right;\n\n    @include media(\"<medium\") {\n      text-align: center;\n    }\n  }\n\n\n  p,\n  a {\n    @include type-free($base-font-size, 0, 0px, 24px, true);\n    color: $bright;\n    font-weight: $semibold;\n    text-transform: uppercase;\n  }\n\n}","// ======================================================================\n// 06-components - Menu\n// ======================================================================\n\n.menu-list {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  display: grid;\n  justify-content: center;\n  text-transform: uppercase;\n  font-weight: $semibold;\n  @include media(\">medium\") {\n    justify-content: flex-end;\n  }\n}\n","// ======================================================================\n// 06-components - Forms\n// ======================================================================\n\n.form {\n  @include form-complete;\n\n  .input-image {\n    width: rem(100px);\n    height: rem(45px);\n    margin: rem(12px) 0 0;\n  }\n\n  [type=\"range\"] {\n    margin: rem(16px) 0 0;\n  }\n}\n\n.form-elements {\n  display: grid;\n  grid-column-gap: rem(24px);\n  grid-row-gap: rem(24px);\n  grid-template-columns: 1fr;\n  @include minbreak($bp-medium) {\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: auto;\n  }\n  @include minbreak($bp-large) {\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: auto;\n  }\n\n  .form-input {\n    line-height: 0;\n\n    span {\n      display: block;\n      @include type-free(21px, 24px, 24px, 24px, true);\n    }\n  }\n\n  .choices {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n}\n\n.radios {\n  @include checkradio();\n}\n\n.error-box {\n  border: 1px solid $negative;\n  background-color: lighten($negative, 60%);\n  padding: rem(8px);\n  color: $negative;\n\n  p {\n    @include type-free($base-font-size, 0, 0, 24px, true);\n  }\n}\n","// ======================================================================\n// Slate Framework <hello@slateengine.com>\n// ======================================================================\n//\n// ======================================================================\n// Slate Form Helpers\n// ======================================================================\n\n@import 'input-helpers';\n@import 'valid-helpers';\n\n/// [Basic setup for forms, using some sensible defaults.]\n/// @param  {[type]} $map-name [$form-skin-default] [variable used for the forms skin]\n/// @author Hash&Salt\n/// @group Forms\n@mixin form($map-name: $form-skin) {\n  @include rem(margin, map-deep-get($map-name, 'form', 'margin'));\n  @include rem(padding, map-deep-get($map-name, 'form', 'padding'));\n\n  legend {\n    @include rem(margin, map-deep-get($map-name, 'legend', 'margin'));\n    @include rem(line-height, map-deep-get($map-name, 'legend', 'line-height'));\n  }\n\n  fieldset {\n    @include rem(margin, map-deep-get($map-name, 'fieldset', 'margin'));\n    @include rem(padding, map-deep-get($map-name, 'fieldset', 'padding'));\n    display: block;\n  }\n\n  label,\n  .label {\n      @include rem(margin, map-deep-get($map-name, 'labels', 'spacing'));\n      display: inline-block;\n      font-style: inherit;\n      color: map-deep-get($map-name, 'labels', 'color');\n      line-height: $line-height;\n  }\n}\n","// ======================================================================\n// Slate Framework <hello@slateengine.com>\n// ======================================================================\n//\n// ======================================================================\n// Slate Forms: Inputs\n// ======================================================================\n/// [Setup input styles. These are controlled by a SASS map variable (`$input-default`) in the config files.Copy this variable and modify to make multiple styles. Simply pass the new variable as a parameter on the mixin.]\n/// @param  {Variable} $map-name [$input-default] Variable for the inputs style.\n/// @example scss - Basic Inputs\n///   @include inputs($map-variable);\n/// @author Hash&Salt\n/// @group Forms\n@mixin inputs($map-name: $input-skin) {\n  input,\n  select,\n  textarea {\n    display: inline-block;\n    width: 100%;\n  }\n\n  .#{map-deep-get($map-name, 'input-class')} {\n    @include inputstyle($map-name);\n  }\n\n  textarea {\n    @include rem(margin, map-deep-get($map-name, 'margin'));\n    @include rem(min-height, 150px);\n    position: relative;\n    overflow: auto;\n    outline: none;\n    line-height: map-deep-get($map-name, 'line-height');\n    box-sizing: border-box;\n    resize: vertical;\n  }\n\n  [type='search'] {\n    -webkit-appearance: none;\n  }\n\n  [list]::-webkit-calendar-picker-indicator {\n    display: none;\n  }\n\n  .datalist {\n    @if map-deep-get($input-skin, 'bg', 'bg-color') != transparent {\n      background-size: map-deep-get($map-name, 'selects', 'triangle-size');\n      background-position: map-deep-get($map-name, 'selects', 'triangle-position');\n      background-origin: content-box;\n      background-repeat: no-repeat;\n      @if lightness(map-deep-get($map-name, 'bg', 'bg-color')) < 50 {\n        background-image: svg-url-with-replaced-fill(map-deep-get($map-name, 'selects', 'arrow'), '#000000', map-deep-get($map-name, 'selects', 'triangle-color-light'));\n      } @else {\n        background-image: svg-url-with-replaced-fill(map-deep-get($map-name, 'selects', 'arrow'), '#000000', map-deep-get($map-name, 'selects', 'triangle-color-dark'));\n      }\n    }\n  }\n\n  [type='color'] {\n    @include rem(height, map-deep-get($map-name, height));\n    @include rem(margin, map-deep-get($map-name, margin));\n    @include rem(font-size, map-deep-get($map-name, font-size));\n    width: map-deep-get($map-name, width);\n    box-sizing: border-box;\n    display: block;\n    background-color: transparent;\n    outline: none;\n    cursor: pointer;\n    padding: rem(4px);\n    @include borders(map-deep-get($map-name, 'borders', 'border-width'), map-deep-get($map-name, 'borders', 'border-style'), map-deep-get($map-name, 'borders', 'border-color'));\n\n    &:hover {\n      @include borders(map-deep-get($map-name, 'borders', 'border-width'), map-deep-get($map-name, 'borders', 'border-style'), map-deep-get($map-name, 'borders', 'border-hover-color'));\n    }\n\n    &:focus {\n      @include borders(map-deep-get($map-name, 'borders', 'border-width'), map-deep-get($map-name, 'borders', 'border-style'), map-deep-get($map-name, 'borders', 'border-focus-color'));\n    }\n\n    &:focus {\n      @include borders(map-deep-get($map-name, 'borders', 'border-width'), map-deep-get($map-name, 'borders', 'border-style'), map-deep-get($map-name, 'borders', 'border-disabled-color'));\n    }\n  }\n}\n","// ======================================================================\n// Slate Framework <hello@slateengine.com>\n// ======================================================================\n//\n// ======================================================================\n// Slate Forms: Input Helpers\n// ======================================================================\n// Inputs\n@mixin inputstyle($map-name: $input-skin) {\n  @include rem(height, map-deep-get($map-name, 'height'));\n  @include rem(margin, map-deep-get($map-name, 'margin'));\n  @include rem(font-size, map-deep-get($map-name, 'font-size'));\n  @include rem(padding, map-deep-get($map-name, 'padding'));\n  width: map-deep-get($map-name, 'width');\n  font-family: map-deep-get($map-name, 'font');\n  box-sizing: border-box;\n  // Background\n  background-color: map-deep-get($map-name, 'bg', 'bg-color');\n  // Borders\n  @if map-get($map-name, use-borders) == true {\n    @include borders(map-deep-get($map-name, 'borders', 'border-width'), map-deep-get($map-name, 'borders', 'border-style'), map-deep-get($map-name, 'borders', 'border-color'));\n  } @else {\n    border: 0;\n  }\n  @include lightness(map-deep-get($map-name, 'bg', 'bg-color'), map-get($map-name, 'textlight'), map-get($map-name, 'textdark'));\n  // Hover\n  &:hover {\n    outline: none;\n    background-color: map-deep-get($map-name, 'bg', 'bg-color-hover');\n    @if map-get($map-name, use-borders) == true {\n      @include borders(map-deep-get($map-name, 'borders', 'border-width'), map-deep-get($map-name, 'borders', 'border-style'), map-deep-get($map-name, 'borders', 'border-hover-color'));\n    } @else {\n      border: 0;\n    }\n    @include lightness(map-deep-get($map-name, 'bg', 'bg-color-hover'), map-get($map-name, 'textlight'), map-get($map-name, 'textdark'));\n  }\n  // Focus\n  &:focus {\n    outline: none;\n    background-color: map-deep-get($map-name, 'bg', 'bg-color-focus');\n    @if map-get($map-name, use-borders) == true {\n      @include borders(map-deep-get($map-name, 'borders', 'border-width'), map-deep-get($map-name, 'borders', 'border-style'), map-deep-get($map-name, 'borders', 'border-focus-color'));\n    } @else {\n      border: 0;\n    }\n    @include lightness(map-deep-get($map-name, 'bg', 'bg-color-focus'), map-get($map-name, 'textlight'), map-get($map-name, 'textdark'));\n  }\n  // Disabled\n  &:disabled {\n    cursor: disabled;\n    background-color: map-deep-get($map-name, 'bg', 'bg-color-disabled');\n    @if map-get($map-name, use-borders) == true {\n      @include borders(map-deep-get($map-name, 'borders', 'border-width'), map-deep-get($map-name, 'borders', 'border-style'), map-deep-get($map-name, 'borders', 'border-disabled-color'));\n    } @else {\n      border: 0;\n    }\n    @include lightness(map-deep-get($map-name, 'bg', 'bg-color-disabled'), map-get($map-name, 'textlight'), map-get($map-name, 'textdark'));\n  }\n}\n\n/// Style all inputs at once except select\n/// @author Hash&Salt\n/// @group Forms\n@mixin inputs-all {\n  [type='date'],\n  [type='datetime'],\n  [type='datetime-local'],\n  [type='email'],\n  [type='month'],\n  [type='number'],\n  [type='password'],\n  [type='search'],\n  [type='tel'],\n  [type='text'],\n  [type='time'],\n  [type='url'],\n  [type='week'],\n  input,\n  textarea {\n    @content;\n  }\n}\n\n// Build Form\n// ======================================================================\n/// A quick way to add all of the form mixins (baseform, inputs, addons, select, validation) in one go based on settings in the `$form-skin-default` SASS map\n/// @param  {Variable} $map-name [$form-skin-default] [Config variable to use for forms]\n/// @author Hash&Salt\n/// @group Forms\n\n@mixin form-complete($map-name: $form-skin) {\n  @if map-deep-get($map-name, 'components', 'baseform') == true {\n    @include form;\n  }\n  @if map-deep-get($map-name, 'components', 'inputs') == true {\n    @include inputs(map-deep-get($map-name, 'skins', 'inputs'));\n  }\n  @if map-deep-get($map-name, 'components', 'select') == true {\n    @include select(map-deep-get($map-name, 'skins', 'select'));\n  }\n  @if map-deep-get($map-name, 'components', 'range') == true {\n    @include range-input(map-deep-get($map-name, 'skins', 'range'));\n  }\n  @if map-deep-get($map-name, 'components', 'addons') == true {\n    @include addons(map-deep-get($map-name, 'skins', 'addons'));\n  }\n  @if map-deep-get($map-name, 'components', 'validation') == true {\n    @include validation(map-deep-get($map-name, 'skins', 'validation'));\n  }\n}\n","// ======================================================================\n// Slate Framework <hello@slateengine.com>\n// ======================================================================\n//\n// ======================================================================\n// Slate Forms: Select\n// ======================================================================\n/// Setup select styles. These are controlled by a SASS map variable (`$select-default`) in the config files.\n/// Copy this variable and modify to make multiple styles. Simply pass the new variable as a parameter on\n/// the mixin.\n/// @param  {Variable} $map-name [$select-default] [Skin to use for the select element]\n/// @example scss - Basic Select\n/// .form {\n///     @include select($map-variable);\n/// }\n/// @author Hash&Salt\n/// @group Forms\n@mixin select($map-name: $input-skin) {\n  select {\n    @include inputstyle($map-name);\n    border-radius: 0;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n\n    &::-ms-expand {\n      display: none;\n    }\n\n    &[multiple] {\n      height: 100%;\n      height: rem(120px);\n    }\n    // Triangle\n    &:not([multiple]) {\n      @if map-deep-get($map-name, 'bg', 'bg-color') != transparent {\n        background-size: map-deep-get($map-name, 'selects', 'triangle-size');\n        background-position: map-deep-get($map-name, 'selects', 'triangle-position');\n        background-origin: content-box;\n        background-repeat: no-repeat;\n        @if lightness(map-deep-get($map-name, 'bg', 'bg-color')) < 50 {\n          background-image: svg-url-with-replaced-fill(map-deep-get($map-name, 'selects', 'arrow'), '#000000', map-deep-get($map-name, 'selects', 'triangle-color-light'));\n        } @else {\n          background-image: svg-url-with-replaced-fill(map-deep-get($map-name, 'selects', 'arrow'), '#000000', map-deep-get($map-name, 'selects', 'triangle-color-dark'));\n        }\n      }\n    }\n  }\n}\n","// ======================================================================\n// Slate Framework <hello@slateengine.com>\n// ======================================================================\n//\n// ======================================================================\n// Slate Forms: Range Slider\n// ======================================================================\n// Based on https://github.com/darlanrod/input-range-scss\n@mixin range-input($map-name: $input-skin) {\n  // Thumb Vars\n  $thumb-color: map-deep-get($map-name, 'range', 'thumb', 'color');\n  $thumb-radius: map-deep-get($map-name, 'range', 'thumb', 'radius');\n  $thumb-height: map-deep-get($map-name, 'range', 'thumb', 'height');\n  $thumb-width: map-deep-get($map-name, 'range', 'thumb', 'width');\n  $thumb-border-width: map-deep-get($map-name, 'range', 'thumb', 'border-width');\n  $thumb-border-color: map-deep-get($map-name, 'range', 'thumb', 'border-color');\n  $thumb-border-style: map-deep-get($map-name, 'range', 'thumb', 'border-style');\n  // Track Vars\n  $track-color: map-deep-get($map-name, 'range', 'track', 'color');\n  $track-radius: map-deep-get($map-name, 'range', 'track', 'radius');\n  $track-height: map-deep-get($map-name, 'range', 'track', 'height');\n  $track-width: map-deep-get($map-name, 'range', 'track', 'width');\n  $track-border-width: map-deep-get($map-name, 'range', 'track', 'border-width');\n  $track-border-color: map-deep-get($map-name, 'range', 'track', 'border-color');\n  $track-border-style: map-deep-get($map-name, 'range', 'track', 'border-style');\n  // Misc Vars\n  $margin: map-deep-get($map-name, 'range', 'margin');\n  $contrast: map-deep-get($map-name, 'range', 'contrast');\n  $ie-bottom-track-color: map-deep-get($map-name, 'range', 'ie-bottom-track-color');\n\n  [type='range'] {\n    width: $track-width;\n    margin: rem($margin);\n    background: transparent;\n    -webkit-appearance: none;\n\n    &::-moz-focus-outer {\n      border: 0;\n    }\n\n    &:focus {\n      outline: 0;\n\n      &::-ms-fill-upper,\n      &::-webkit-slider-runnable-track {\n        background: lighten($track-color, $contrast);\n      }\n\n      &::-ms-fill-lower {\n        background: $track-color;\n      }\n    }\n\n    &::-webkit-slider-runnable-track {\n      width: $track-width;\n      height: $track-height;\n      cursor: default;\n      transition: all 0.2s ease;\n      border-radius: $track-radius;\n      background: $track-color;\n      @include borders($track-border-width, $track-border-style, $track-border-color);\n    }\n\n    &::-webkit-slider-thumb {\n      box-sizing: border-box;\n      width: $thumb-width;\n      height: $thumb-height;\n      margin-top: ((-$track-border-width * 2 + $track-height) / 2 - $thumb-height / 2);\n      cursor: default;\n      border-radius: $thumb-radius;\n      background: $thumb-color;\n      @include borders($thumb-border-width, $thumb-border-style, $thumb-border-color);\n      -webkit-appearance: none;\n    }\n\n    &::-moz-range-track {\n      width: $track-width;\n      height: $track-height / 2;\n      cursor: default;\n      transition: all 0.2s ease;\n      border-radius: $track-radius;\n      background: $track-color;\n      @include borders($track-border-width, $track-border-style, $track-border-color);\n    }\n\n    &::-moz-range-thumb {\n      box-sizing: border-box;\n      width: $thumb-width;\n      height: $thumb-height;\n      cursor: default;\n      border-radius: $thumb-radius;\n      background: $thumb-color;\n      @include borders($thumb-border-width, $thumb-border-style, $thumb-border-color);\n    }\n\n    &::-ms-track {\n      width: $track-width;\n      height: $track-height;\n      cursor: default;\n      transition: all 0.2s ease;\n      color: transparent;\n      border-width: ($thumb-height / 2) 0;\n      border-color: transparent;\n      background: transparent;\n    }\n\n    &::-ms-fill-lower {\n      border-radius: ($track-radius * 2);\n      background: $ie-bottom-track-color;\n      @include borders($track-border-width, $track-border-style, $track-border-color);\n    }\n\n    &::-ms-fill-upper {\n      border-radius: ($track-radius * 2);\n      background: $track-color;\n      @include borders($track-border-width, $track-border-style, $track-border-color);\n    }\n\n    &::-ms-thumb {\n      box-sizing: border-box;\n      width: $thumb-width;\n      height: $thumb-height;\n      margin-top: $track-height / 4;\n      cursor: default;\n      border-radius: $thumb-radius;\n      background: $thumb-color;\n      @include borders($thumb-border-width, $thumb-border-style, $thumb-border-color);\n    }\n\n    &:disabled {\n      &::-moz-range-thumb,\n      &::-ms-fill-lower,\n      &::-ms-fill-upper,\n      &::-ms-thumb,\n      &::-webkit-slider-runnable-track,\n      &::-webkit-slider-thumb {\n        cursor: not-allowed;\n      }\n    }\n  }\n}\n","// ======================================================================\n// Slate Framework <hello@slateengine.com>\n// ======================================================================\n//\n// ======================================================================\n// Slate Forms: Input Addons\n// ======================================================================\n\n/// Append or prepend an icon / button / link to an input or select box. These are controlled by a SASS map variable (`$select-default`) in the config files.\n/// Copy this variable and modify to make multiple styles. Simply pass the new variable as a parameter on\n/// the mixin.\n/// @example scss - Basic Select\n/// .form {\n///     @include select($map-variable);\n/// }\n/// @example html - Addon HTML\n/// <div class='form-addon addon-right'>\n///   <select class='addon-field' name='select'>\n///     <option value='About'>About</option>\n///   </select>\n/// <div class='addon-button'><button type='button'>Go!</button></div>\n/// </div>\n/// @param {Variable} $map-name [$input-default] - SASS map variable for the select element style.\n/// @author Hash&Salt\n/// @group Forms\n\n@mixin addons ($map-name: $input-skin, $button-skin: $button-addon) {\n  .#{map-deep-get($map-name, 'addons', 'wrapper')} {\n    display: grid;\n    grid-template-columns: 1fr auto;\n    grid-template-rows: auto auto;\n    grid-template-areas: 'label label' 'input button';\n    grid-auto-flow: dense;\n    align-items: center;\n\n    // Label\n    label {\n      grid-area: label;\n    }\n\n    // Inputs\n    @include inputs-all {\n      grid-area: input;\n      width: 100%;\n    }\n\n    // Select\n    select {\n      grid-area: input;\n      width: auto;\n    }\n\n    // Button\n    [type='submit'],\n    span,\n    button {\n      grid-area: button;\n      @include button($button-skin);\n      white-space: nowrap;\n    }\n\n    span {\n      grid-area: icon;\n    }\n\n    // Modifiers\n\n    &.#{map-deep-get($map-name, 'addons', 'left')} {\n      grid-template-areas: 'label label' 'button input';\n      grid-template-columns: auto 1fr;\n\n      [type='submit'],\n      span,\n      button {\n        border-right: 0;\n\n        &:hover {\n          border-right: 0;\n        }\n      }\n    }\n\n    &.#{map-deep-get($map-name, 'addons', 'right')} {\n\n      [type='submit'],\n      span,\n      button {\n        border-left: 0;\n\n        &:hover {\n          border-left: 0;\n        }\n      }\n    }\n\n    &.#{map-deep-get($map-name, 'addons', 'icon')} {\n      grid-template-columns: auto 2fr auto;\n      grid-template-rows: auto auto;\n      grid-template-areas: 'label label label' 'icon input button';\n\n      span {\n        border-right: 0;\n        display: block;\n\n        &:hover {\n          border-right: 0;\n          cursor: default;\n          background: map-get($button-addon, default);\n          @include lightness(map-get($button-addon, 'default'), map-get($map-name, 'textlight'), map-get($map-name, 'textdark'));\n        }\n      }\n\n      [type='submit'],\n      button {\n        border-left: 0;\n\n        &:hover {\n          border-left: 0;\n        }\n      }\n    }\n  }\n}\n","// ======================================================================\n// Slate Framework <hello@slateengine.com>\n// ======================================================================\n//\n// ======================================================================\n// Slate Forms: Valid Helpers\n// ======================================================================\n\n/// Built-in presentational styles for required elements. Set $form-validation-classes-toggle to false to use HTML5 validation instead.\n/// @example scss - Validation\n/// .form {\n///     @include validation;\n/// }\n/// @author Hash&Salt\n/// @param {Variable} $valid-classes [$form-validation-classes-toggle] - Toggle validation classes.\n/// @group Validation\n@mixin validation($map-name: $input-skin) {\n  @if map-deep-get($map-name, 'validation', 'use-classes') == true {\n    // Valid\n    .#{map-deep-get($map-name, 'validation', 'valid-class')} {\n      color: map-deep-get($map-name, 'validation', 'valid-color');\n    }\n    // Invalid\n    .#{map-deep-get($map-name, 'validation', 'invalid-class')} {\n      color: map-deep-get($map-name, 'validation', 'invalid-color');\n    }\n    // Required\n    .#{map-deep-get($map-name, 'validation', 'required-class')} {\n      color: map-deep-get($map-name, 'validation', 'required-color');\n    }\n\n    // Classes for required Inputs\n\n    .#{map-get($map-name, 'input-class')} {\n      // Valid\n      &.#{map-deep-get($map-name, 'validation', 'valid-class')} {\n        border-color: map-deep-get($map-name, 'validation', 'valid-input-border-color');\n        color: map-deep-get($map-name, 'validation', 'valid-color');\n\n        &:focus {\n          border-color: map-deep-get($map-name, 'validation', 'valid-input-border-color');\n          color: map-deep-get($map-name, 'validation', 'valid-color');\n        }\n      }\n      // Invalid\n      &.#{map-deep-get($map-name, 'validation', 'invalid-class')} {\n        border-color: map-deep-get($map-name, 'validation', 'invalid-input-border-color');\n        color: map-deep-get($map-name, 'validation', 'invalid-color');\n\n        &:focus {\n          border-color: map-deep-get($map-name, 'validation', 'invalid-input-border-color');\n          color: map-deep-get($map-name, 'validation', 'invalid-color');\n        }\n      }\n      // Required\n      &.#{map-deep-get($map-name, 'validation', 'required-class')} {\n        border-color: map-deep-get($map-name, 'validation', 'required-input-border-color');\n        color: map-deep-get($map-name, 'validation', 'required-color');\n\n        &:focus {\n          border-color: map-deep-get($map-name, 'validation', 'required-input-border-color');\n          color: map-deep-get($map-name, 'validation', 'required-color');\n        }\n      }\n    }\n\n  } @else {\n    // HTML 5 for Required Inputs\n    .#{map-get($map-name, 'input-class')} {\n      &:focus {\n        // Required\n        &:required {\n          border-color: map-deep-get($map-name, 'validation', 'required-input-border-color');\n          color: map-deep-get($map-name, 'validation', 'required-color');\n        }\n        // Valid\n        &:valid {\n          border-color: map-deep-get($map-name, 'validation', 'valid-input-border-color');\n          color: map-deep-get($map-name, 'validation', 'valid-color');\n        }\n        // Invalid\n        &:invalid {\n          border-color: map-deep-get($map-name, 'validation', 'invalid-input-border-color');\n          color: map-deep-get($map-name, 'validation', 'invalid-color');\n        }\n      }\n    }\n  }\n}\n","// ======================================================================\n// Slate Framework <hello@slateengine.com>\n// ======================================================================\n//\n// ======================================================================\n// Slate Forms: Radios / Checkboxes\n// ======================================================================\n\n@mixin checkradio($map-name: $input-skin) {\n\n  label {\n    @include rem(padding-left, map-deep-get($map-name, 'radios', 'label-h-align'));\n    @include rem(margin-bottom, map-deep-get($map-name, 'radios', 'spacing'));\n    display: inline-block;\n    cursor: pointer;\n    position: relative;\n\n    &::before {\n      @include rem(width, map-deep-get($map-name, 'radios', 'width'));\n      @include rem(height, map-deep-get($map-name, 'radios', 'height'));\n      @include rem(bottom, map-deep-get($map-name, 'radios', 'input-v-align'));\n      content: '';\n      color: map-deep-get($map-name, 'radios', 'selected-color');\n      display: inline-block;\n      position: absolute;\n      left: 0;\n      top: 0;\n      background-color: map-deep-get($map-name, 'bg', 'bg-color');\n      @include borders(map-deep-get($map-name, 'borders', 'border-width'), map-deep-get($map-name, 'borders', 'border-style'), map-deep-get($map-name, 'borders', 'border-color'));\n    }\n  }\n\n  [type='checkbox'],\n  [type='radio'] {\n    @include rem(margin, map-deep-get($map-name, 'radios', 'check-radio-margin'));\n    margin: 0;\n    padding: 0;\n    vertical-align: middle;\n    display: inline;\n    height: auto;\n    width: auto;\n    position: absolute;\n    left: -99999px;\n\n    + label {\n      @include rem(margin-bottom, map-deep-get($map-name, 'radios', 'spacing'));\n      margin-left: 0;\n    }\n    // checked\n    &:checked {\n      + label {\n        &::before {\n          content: '';\n          background-image: svg-url-with-replaced-fill(map-deep-get($map-name, 'radios', 'checkicon'), '#000000', map-deep-get($map-name, 'radios', 'selected-color'));\n          background-size: map-deep-get($map-name, 'radios', 'checkicon-size');\n          background-repeat: no-repeat;\n          background-position: center center;\n          @include borders(map-deep-get($map-name, 'borders', 'border-width'), map-deep-get($map-name, 'borders', 'border-style'), map-deep-get($map-name, 'radios', 'border-checked-color'));\n        }\n      }\n    }\n    // focus\n    &:focus {\n      + label {\n        &::before {\n          @include borders(map-deep-get($map-name, 'borders', 'border-width'), map-deep-get($map-name, 'borders', 'border-style'), map-deep-get($map-name, 'borders', 'border-focus-color'));\n          color: map-deep-get($map-name, 'radios', selected-color);\n          background-color: map-deep-get($map-name, 'bg', 'bg-color-focus');\n        }\n      }\n      // focus + checked\n      &:checked {\n        + label {\n          &::before {\n            @include borders(map-deep-get($map-name, 'borders', 'border-width'), map-deep-get($map-name, 'borders', 'border-style'), map-deep-get($map-name, 'radios', 'border-checked-color'));\n            color: map-deep-get($map-name, 'radios', selected-color);\n            background-color: map-deep-get($map-name, 'bg', 'bg-color-focus');\n          }\n        }\n      }\n    }\n    // hover\n    &:hover {\n      + label {\n        &::before {\n          @include borders(map-deep-get($map-name, 'borders', 'border-width'), map-deep-get($map-name, 'borders', 'border-style'), map-deep-get($map-name, 'radios', 'border-hover-color'));\n          color: map-deep-get($map-name, 'radios', 'selected-color');\n          background-color: map-deep-get($map-name, 'bg', 'bg-color-hover');\n        }\n      }\n      // hover + checked\n      &:checked {\n        + label {\n          &::before {\n            @include borders(map-deep-get($map-name, 'borders', 'border-width'), map-deep-get($map-name, 'borders', 'border-style'), map-deep-get($map-name, 'radios', 'border-checked-hover-color'));\n            color: map-deep-get($map-name, 'radios', 'selected-color');\n            background-color: map-get($map-name, background-color-hover-checked);\n          }\n        }\n      }\n    }\n  }\n\n  [type='radio'] {\n    + label {\n      &::before {\n        border-radius: map-deep-get($map-name, 'radios', 'radio-radius');\n      }\n    }\n\n    &:checked {\n      + label {\n        &::before {\n          content: '';\n          background-image: svg-url-with-replaced-fill(map-deep-get($map-name, 'radios', 'radioicon'), '#000000', map-deep-get($map-name, 'radios', 'selected-color'));\n          background-size: map-deep-get($map-name, 'radios', 'radioicon-size');\n          background-repeat: no-repeat;\n          background-position: center center;\n        }\n      }\n    }\n  }\n}\n"],"sourceRoot":""}